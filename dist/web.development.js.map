{"version":3,"file":"web.development.js","mappings":"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A;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;ACzFA;AACA;AACA;AACA;AACA;AACA;;AAEa;;AAEb;;AAEA,IAAI,IAAqC;AACzC,6BAA6B,mBAAO,CAAC,yFAA4B;AACjE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,WAAW;AACtB;AACA;AACA;AACA,MAAM,IAAqC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6GAA6G;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,IAAqC;AAC3C;AACA;AACA;;AAEA;;;;;;;;;;;;ACrGA;AACA;AACA;AACA;AACA;AACA;;AAEa;;AAEb,cAAc,mBAAO,CAAC,kDAAU;AAChC,aAAa,mBAAO,CAAC,4DAAe;;AAEpC,2BAA2B,mBAAO,CAAC,yFAA4B;AAC/D,qBAAqB,mBAAO,CAAC,qEAAkB;;AAE/C;AACA;;AAEA,IAAI,IAAqC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,2CAA2C;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,8BAA8B;AAC9B,QAAQ;AACR;AACA;AACA;AACA;AACA,+BAA+B,KAAK;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,4BAA4B;AAC5B,OAAO;AACP;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,IAAqC;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,SAAS,KAAqC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sBAAsB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,IAAqC;AAC/C;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,2BAA2B;AACjD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM,KAAqC,4FAA4F,CAAM;AAC7I;AACA;;AAEA,oBAAoB,gCAAgC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,gCAAgC;AACtD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;AC9kBA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI,IAAqC;AACzC,gBAAgB,mBAAO,CAAC,kDAAU;;AAElC;AACA;AACA;AACA,mBAAmB,mBAAO,CAAC,uFAA2B;AACtD,EAAE,KAAK,EAIN;;;;;;;;;;;;AClBD;AACA;AACA;AACA;AACA;AACA;;AAEa;;AAEb;;AAEA;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEa;;;;AAIb,IAAI,IAAqC;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E;AAC3E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;;AAEjD;AACA;AACA;AACA,kDAAkD;;AAElD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB;AACjB,sBAAsB;AACtB,uBAAuB;AACvB,uBAAuB;AACvB,eAAe;AACf,kBAAkB;AAClB,gBAAgB;AAChB,YAAY;AACZ,YAAY;AACZ,cAAc;AACd,gBAAgB;AAChB,kBAAkB;AAClB,gBAAgB;AAChB,mBAAmB;AACnB,wBAAwB;AACxB,yBAAyB;AACzB,yBAAyB;AACzB,iBAAiB;AACjB,oBAAoB;AACpB,kBAAkB;AAClB,cAAc;AACd,cAAc;AACd,gBAAgB;AAChB,kBAAkB;AAClB,oBAAoB;AACpB,kBAAkB;AAClB,0BAA0B;AAC1B,cAAc;AACd,GAAG;AACH;;;;;;;;;;;;ACpLa;;AAEb,IAAI,KAAqC,EAAE,EAE1C,CAAC;AACF,EAAE,gIAAyD;AAC3D;;;;;;;;;;;;ACNA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;ACN0B;AACQ;;AAElC,iEAAenJ,6CAAI,EAAC","sources":["webpack://react-native-onyx/web/webpack/universalModuleDefinition","webpack://react-native-onyx/web/./lib/Logger.js","webpack://react-native-onyx/web/./lib/Onyx.js","webpack://react-native-onyx/web/./lib/OnyxCache.js","webpack://react-native-onyx/web/./lib/Str.js","webpack://react-native-onyx/web/./lib/batch.js","webpack://react-native-onyx/web/./lib/createDeferredTask.js","webpack://react-native-onyx/web/./lib/metrics/PerformanceUtils.js","webpack://react-native-onyx/web/./lib/metrics/index.web.js","webpack://react-native-onyx/web/./lib/storage/WebStorage.js","webpack://react-native-onyx/web/./lib/storage/index.web.js","webpack://react-native-onyx/web/./lib/storage/providers/IDBKeyVal.js","webpack://react-native-onyx/web/./lib/utils.js","webpack://react-native-onyx/web/./lib/withOnyx.js","webpack://react-native-onyx/web/./node_modules/object-assign/index.js","webpack://react-native-onyx/web/./node_modules/prop-types/checkPropTypes.js","webpack://react-native-onyx/web/./node_modules/prop-types/factoryWithTypeCheckers.js","webpack://react-native-onyx/web/./node_modules/prop-types/index.js","webpack://react-native-onyx/web/./node_modules/prop-types/lib/ReactPropTypesSecret.js","webpack://react-native-onyx/web/./node_modules/react-is/cjs/react-is.development.js","webpack://react-native-onyx/web/./node_modules/react-is/index.js","webpack://react-native-onyx/web/external umd \"fast-equals\"","webpack://react-native-onyx/web/external umd \"idb-keyval\"","webpack://react-native-onyx/web/external umd \"lodash/transform\"","webpack://react-native-onyx/web/external umd \"react\"","webpack://react-native-onyx/web/external umd \"react-dom\"","webpack://react-native-onyx/web/external umd \"underscore\"","webpack://react-native-onyx/web/webpack/bootstrap","webpack://react-native-onyx/web/webpack/runtime/compat get default export","webpack://react-native-onyx/web/webpack/runtime/define property getters","webpack://react-native-onyx/web/webpack/runtime/global","webpack://react-native-onyx/web/webpack/runtime/hasOwnProperty shorthand","webpack://react-native-onyx/web/webpack/runtime/make namespace object","webpack://react-native-onyx/web/./lib/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"fast-equals\"), require(\"underscore\"), require(\"react-dom\"), require(\"idb-keyval\"), require(\"lodash/transform\"), require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"fast-equals\", \"underscore\", \"react-dom\", \"idb-keyval\", \"lodash/transform\", \"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"react-native-onyx/web\"] = factory(require(\"fast-equals\"), require(\"underscore\"), require(\"react-dom\"), require(\"idb-keyval\"), require(\"lodash/transform\"), require(\"react\"));\n\telse\n\t\troot[\"react-native-onyx/web\"] = factory(root[\"fast-equals\"], root[\"underscore\"], root[\"react-dom\"], root[\"idb-keyval\"], root[\"lodash/transform\"], root[\"react\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE_fast_equals__, __WEBPACK_EXTERNAL_MODULE_underscore__, __WEBPACK_EXTERNAL_MODULE_react_dom__, __WEBPACK_EXTERNAL_MODULE_idb_keyval__, __WEBPACK_EXTERNAL_MODULE_lodash_transform__, __WEBPACK_EXTERNAL_MODULE_react__) => {\nreturn ","// Logging callback\nlet logger = () => {};\n\n/**\n * Register the logging callback\n *\n * @param {Function} callback\n */\nfunction registerLogger(callback) {\n    logger = callback;\n}\n\n/**\n * Send an alert message to the logger\n *\n * @param {String} message\n */\nfunction logAlert(message) {\n    logger({message: `[Onyx] ${message}`, level: 'alert'});\n}\n\n/**\n * Send an info message to the logger\n *\n * @param {String} message\n */\nfunction logInfo(message) {\n    logger({message: `[Onyx] ${message}`, level: 'info'});\n}\n\nexport {\n    registerLogger,\n    logInfo,\n    logAlert,\n};\n","/* eslint-disable no-continue */\nimport {deepEqual} from 'fast-equals';\nimport _ from 'underscore';\nimport * as Logger from './Logger';\nimport cache from './OnyxCache';\nimport * as Str from './Str';\nimport createDeferredTask from './createDeferredTask';\nimport * as PerformanceUtils from './metrics/PerformanceUtils';\nimport Storage from './storage';\nimport utils from './utils';\nimport unstable_batchedUpdates from './batch';\n\n// Method constants\nconst METHOD = {\n    SET: 'set',\n    MERGE: 'merge',\n    MERGE_COLLECTION: 'mergecollection',\n    MULTI_SET: 'multiset',\n    CLEAR: 'clear',\n};\n\n// Key/value store of Onyx key and arrays of values to merge\nconst mergeQueue = {};\nconst mergeQueuePromise = {};\n\n// Keeps track of the last connectionID that was used so we can keep incrementing it\nlet lastConnectionID = 0;\n\n// Holds a mapping of all the react components that want their state subscribed to a store key\nconst callbackToStateMapping = {};\n\n// Keeps a copy of the values of the onyx collection keys as a map for faster lookups\nlet onyxCollectionKeyMap = new Map();\n\n// Holds a list of keys that have been directly subscribed to or recently modified from least to most recent\nlet recentlyAccessedKeys = [];\n\n// Holds a list of keys that are safe to remove when we reach max storage. If a key does not match with\n// whatever appears in this list it will NEVER be a candidate for eviction.\nlet evictionAllowList = [];\n\n// Holds a map of keys and connectionID arrays whose keys will never be automatically evicted as\n// long as we have at least one subscriber that returns false for the canEvict property.\nconst evictionBlocklist = {};\n\n// Optional user-provided key value states set when Onyx initializes or clears\nlet defaultKeyStates = {};\n\n// Connections can be made before `Onyx.init`. They would wait for this task before resolving\nconst deferredInitTask = createDeferredTask();\n\nlet batchUpdatesPromise = null;\nlet batchUpdatesQueue = [];\n\n/**\n * We are batching together onyx updates. This helps with use cases where we schedule onyx updates after each other.\n * This happens for example in the Onyx.update function, where we process API responses that might contain a lot of\n * update operations. Instead of calling the subscribers for each update operation, we batch them together which will\n * cause react to schedule the updates at once instead of after each other. This is mainly a performance optimization.\n * @returns {Promise}\n */\nfunction maybeFlushBatchUpdates() {\n    if (batchUpdatesPromise) {\n        return batchUpdatesPromise;\n    }\n\n    batchUpdatesPromise = new Promise((resolve) => {\n        /* We use (setTimeout, 0) here which should be called once native module calls are flushed (usually at the end of the frame)\n         * We may investigate if (setTimeout, 1) (which in React Native is equal to requestAnimationFrame) works even better\n         * then the batch will be flushed on next frame.\n         */\n        setTimeout(() => {\n            const updatesCopy = batchUpdatesQueue;\n            batchUpdatesQueue = [];\n            batchUpdatesPromise = null;\n            unstable_batchedUpdates(() => {\n                updatesCopy.forEach((applyUpdates) => {\n                    applyUpdates();\n                });\n            });\n\n            resolve();\n        }, 0);\n    });\n    return batchUpdatesPromise;\n}\n\nfunction batchUpdates(updates) {\n    batchUpdatesQueue.push(updates);\n    return maybeFlushBatchUpdates();\n}\n\n/**\n * Uses a selector function to return a simplified version of sourceData\n * @param {Mixed} sourceData\n * @param {Function} selector Function that takes sourceData and returns a simplified version of it\n * @param {Object} [withOnyxInstanceState]\n * @returns {Mixed}\n */\nconst getSubsetOfData = (sourceData, selector, withOnyxInstanceState) => selector(sourceData, withOnyxInstanceState);\n\n/**\n * Takes a collection of items (eg. {testKey_1:{a:'a'}, testKey_2:{b:'b'}})\n * and runs it through a reducer function to return a subset of the data according to a selector.\n * The resulting collection will only contain items that are returned by the selector.\n * @param {Object} collection\n * @param {String|Function} selector (see method docs for getSubsetOfData() for full details)\n * @param {Object} [withOnyxInstanceState]\n * @returns {Object}\n */\nconst reduceCollectionWithSelector = (collection, selector, withOnyxInstanceState) => _.reduce(collection, (finalCollection, item, key) => {\n    // eslint-disable-next-line no-param-reassign\n    finalCollection[key] = getSubsetOfData(item, selector, withOnyxInstanceState);\n\n    return finalCollection;\n}, {});\n\n/**\n * Get some data from the store\n *\n * @private\n * @param {string} key\n * @returns {Promise<*>}\n */\nfunction get(key) {\n    // When we already have the value in cache - resolve right away\n    if (cache.hasCacheForKey(key)) {\n        return Promise.resolve(cache.getValue(key));\n    }\n\n    const taskName = `get:${key}`;\n\n    // When a value retrieving task for this key is still running hook to it\n    if (cache.hasPendingTask(taskName)) {\n        return cache.getTaskPromise(taskName);\n    }\n\n    // Otherwise retrieve the value from storage and capture a promise to aid concurrent usages\n    const promise = Storage.getItem(key)\n        .then((val) => {\n            cache.set(key, val);\n            return val;\n        })\n        .catch(err => Logger.logInfo(`Unable to get item from persistent storage. Key: ${key} Error: ${err}`));\n\n    return cache.captureTask(taskName, promise);\n}\n\n/**\n * Returns current key names stored in persisted storage\n * @private\n * @returns {Promise<string[]>}\n */\nfunction getAllKeys() {\n    // When we've already read stored keys, resolve right away\n    const storedKeys = cache.getAllKeys();\n    if (storedKeys.length > 0) {\n        return Promise.resolve(storedKeys);\n    }\n\n    const taskName = 'getAllKeys';\n\n    // When a value retrieving task for all keys is still running hook to it\n    if (cache.hasPendingTask(taskName)) {\n        return cache.getTaskPromise(taskName);\n    }\n\n    // Otherwise retrieve the keys from storage and capture a promise to aid concurrent usages\n    const promise = Storage.getAllKeys()\n        .then((keys) => {\n            _.each(keys, key => cache.addKey(key));\n            return keys;\n        });\n\n    return cache.captureTask(taskName, promise);\n}\n\n/**\n * Checks to see if the a subscriber's supplied key\n * is associated with a collection of keys.\n *\n * @private\n * @param {String} key\n * @returns {Boolean}\n */\nfunction isCollectionKey(key) {\n    return onyxCollectionKeyMap.has(key);\n}\n\n/**\n * @param {String} collectionKey\n * @param {String} key\n * @returns {Boolean}\n */\nfunction isCollectionMemberKey(collectionKey, key) {\n    return Str.startsWith(key, collectionKey) && key.length > collectionKey.length;\n}\n\n/**\n * Checks to see if a provided key is the exact configured key of our connected subscriber\n * or if the provided key is a collection member key (in case our configured key is a \"collection key\")\n *\n * @private\n * @param {String} configKey\n * @param {String} key\n * @return {Boolean}\n */\nfunction isKeyMatch(configKey, key) {\n    return isCollectionKey(configKey)\n        ? Str.startsWith(key, configKey)\n        : configKey === key;\n}\n\n/**\n * Checks to see if this key has been flagged as\n * safe for removal.\n *\n * @private\n * @param {String} testKey\n * @returns {Boolean}\n */\nfunction isSafeEvictionKey(testKey) {\n    return _.some(evictionAllowList, key => isKeyMatch(key, testKey));\n}\n\n/**\n * Tries to get a value from the cache. If the value is not present in cache it will return the default value or undefined.\n * If the requested key is a collection, it will return an object with all the collection members.\n *\n * @param {String} key\n * @param {Object} mapping\n * @returns {Mixed}\n */\nfunction tryGetCachedValue(key, mapping = {}) {\n    let val = cache.getValue(key);\n\n    if (isCollectionKey(key)) {\n        const allKeys = cache.getAllKeys();\n        const matchingKeys = _.filter(allKeys, k => k.startsWith(key));\n        const values = _.reduce(matchingKeys, (finalObject, matchedKey) => {\n            const cachedValue = cache.getValue(matchedKey);\n            if (cachedValue) {\n                // This is permissible because we're in the process of constructing the final object in a reduce function.\n                // eslint-disable-next-line no-param-reassign\n                finalObject[matchedKey] = cachedValue;\n            }\n            return finalObject;\n        }, {});\n        if (_.isEmpty(values)) {\n            return;\n        }\n        val = values;\n    }\n\n    if (mapping.selector) {\n        const state = mapping.withOnyxInstance ? mapping.withOnyxInstance.state : undefined;\n        if (isCollectionKey(key)) {\n            return reduceCollectionWithSelector(val, mapping.selector, state);\n        }\n        return getSubsetOfData(val, mapping.selector, state);\n    }\n\n    return val;\n}\n\n/**\n * Remove a key from the recently accessed key list.\n *\n * @private\n * @param {String} key\n */\nfunction removeLastAccessedKey(key) {\n    recentlyAccessedKeys = _.without(recentlyAccessedKeys, key);\n}\n\n/**\n * Add a key to the list of recently accessed keys. The least\n * recently accessed key should be at the head and the most\n * recently accessed key at the tail.\n *\n * @private\n * @param {String} key\n */\nfunction addLastAccessedKey(key) {\n    // Only specific keys belong in this list since we cannot remove an entire collection.\n    if (isCollectionKey(key) || !isSafeEvictionKey(key)) {\n        return;\n    }\n\n    removeLastAccessedKey(key);\n    recentlyAccessedKeys.push(key);\n}\n\n/**\n * Removes a key previously added to this list\n * which will enable it to be deleted again.\n *\n * @private\n * @param {String} key\n * @param {Number} connectionID\n */\nfunction removeFromEvictionBlockList(key, connectionID) {\n    evictionBlocklist[key] = _.without(evictionBlocklist[key] || [], connectionID);\n\n    // Remove the key if there are no more subscribers\n    if (evictionBlocklist[key].length === 0) {\n        delete evictionBlocklist[key];\n    }\n}\n\n/**\n * Keys added to this list can never be deleted.\n *\n * @private\n * @param {String} key\n * @param {Number} connectionID\n */\nfunction addToEvictionBlockList(key, connectionID) {\n    removeFromEvictionBlockList(key, connectionID);\n\n    if (!evictionBlocklist[key]) {\n        evictionBlocklist[key] = [];\n    }\n\n    evictionBlocklist[key].push(connectionID);\n}\n\n/**\n * Take all the keys that are safe to evict and add them to\n * the recently accessed list when initializing the app. This\n * enables keys that have not recently been accessed to be\n * removed.\n *\n * @private\n * @returns {Promise}\n */\nfunction addAllSafeEvictionKeysToRecentlyAccessedList() {\n    return getAllKeys()\n        .then((keys) => {\n            _.each(evictionAllowList, (safeEvictionKey) => {\n                _.each(keys, (key) => {\n                    if (!isKeyMatch(safeEvictionKey, key)) {\n                        return;\n                    }\n                    addLastAccessedKey(key);\n                });\n            });\n        });\n}\n\n/**\n * @private\n * @param {String} collectionKey\n * @returns {Object}\n */\nfunction getCachedCollection(collectionKey) {\n    const collectionMemberKeys = _.filter(cache.getAllKeys(), (\n        storedKey => isCollectionMemberKey(collectionKey, storedKey)\n    ));\n\n    return _.reduce(collectionMemberKeys, (prev, curr) => {\n        const cachedValue = cache.getValue(curr);\n        if (!cachedValue) {\n            return prev;\n        }\n\n        // eslint-disable-next-line no-param-reassign\n        prev[curr] = cachedValue;\n        return prev;\n    }, {});\n}\n\n/**\n * When a collection of keys change, search for any callbacks matching the collection key and trigger those callbacks\n *\n * @private\n * @param {String} collectionKey\n * @param {Object} partialCollection - a partial collection of grouped member keys\n * @param {boolean} [notifyRegularSubscibers=true]\n * @param {boolean} [notifyWithOnyxSubscibers=true]\n */\nfunction keysChanged(collectionKey, partialCollection, notifyRegularSubscibers = true, notifyWithOnyxSubscibers = true) {\n    // We are iterating over all subscribers similar to keyChanged(). However, we are looking for subscribers who are subscribing to either a collection key or\n    // individual collection key member for the collection that is being updated. It is important to note that the collection parameter cane be a PARTIAL collection\n    // and does not represent all of the combined keys and values for a collection key. It is just the \"new\" data that was merged in via mergeCollection().\n    const stateMappingKeys = _.keys(callbackToStateMapping);\n    for (let i = 0; i < stateMappingKeys.length; i++) {\n        const subscriber = callbackToStateMapping[stateMappingKeys[i]];\n        if (!subscriber) {\n            continue;\n        }\n\n        // Skip iteration if we do not have a collection key or a collection member key on this subscriber\n        if (!Str.startsWith(subscriber.key, collectionKey)) {\n            continue;\n        }\n\n        /**\n         * e.g. Onyx.connect({key: ONYXKEYS.COLLECTION.REPORT, callback: ...});\n         */\n        const isSubscribedToCollectionKey = subscriber.key === collectionKey;\n\n        /**\n         * e.g. Onyx.connect({key: `${ONYXKEYS.COLLECTION.REPORT}{reportID}`, callback: ...});\n         */\n        const isSubscribedToCollectionMemberKey = isCollectionMemberKey(collectionKey, subscriber.key);\n\n        // We prepare the \"cached collection\" which is the entire collection + the new partial data that\n        // was merged in via mergeCollection().\n        const cachedCollection = getCachedCollection(collectionKey);\n\n        // Regular Onyx.connect() subscriber found.\n        if (_.isFunction(subscriber.callback)) {\n            if (!notifyRegularSubscibers) {\n                continue;\n            }\n\n            // If they are subscribed to the collection key and using waitForCollectionCallback then we'll\n            // send the whole cached collection.\n            if (isSubscribedToCollectionKey) {\n                if (subscriber.waitForCollectionCallback) {\n                    subscriber.callback(cachedCollection);\n                    continue;\n                }\n\n                // If they are not using waitForCollectionCallback then we notify the subscriber with\n                // the new merged data but only for any keys in the partial collection.\n                const dataKeys = _.keys(partialCollection);\n                for (let j = 0; j < dataKeys.length; j++) {\n                    const dataKey = dataKeys[j];\n                    subscriber.callback(cachedCollection[dataKey], dataKey);\n                }\n                continue;\n            }\n\n            // And if the subscriber is specifically only tracking a particular collection member key then we will\n            // notify them with the cached data for that key only.\n            if (isSubscribedToCollectionMemberKey) {\n                subscriber.callback(cachedCollection[subscriber.key], subscriber.key);\n                continue;\n            }\n\n            continue;\n        }\n\n        // React component subscriber found.\n        if (subscriber.withOnyxInstance) {\n            if (!notifyWithOnyxSubscibers) {\n                continue;\n            }\n\n            // We are subscribed to a collection key so we must update the data in state with the new\n            // collection member key values from the partial update.\n            if (isSubscribedToCollectionKey) {\n                // If the subscriber has a selector, then the component's state must only be updated with the data\n                // returned by the selector.\n                if (subscriber.selector) {\n                    subscriber.withOnyxInstance.setStateProxy((prevState) => {\n                        const previousData = prevState[subscriber.statePropertyName];\n                        const newData = reduceCollectionWithSelector(cachedCollection, subscriber.selector, subscriber.withOnyxInstance.state);\n\n                        if (!deepEqual(previousData, newData)) {\n                            return {\n                                [subscriber.statePropertyName]: newData,\n                            };\n                        }\n                        return null;\n                    });\n                    continue;\n                }\n\n                subscriber.withOnyxInstance.setStateProxy((prevState) => {\n                    const finalCollection = _.clone(prevState[subscriber.statePropertyName] || {});\n                    const dataKeys = _.keys(partialCollection);\n                    for (let j = 0; j < dataKeys.length; j++) {\n                        const dataKey = dataKeys[j];\n                        finalCollection[dataKey] = cachedCollection[dataKey];\n                    }\n\n                    PerformanceUtils.logSetStateCall(subscriber, prevState[subscriber.statePropertyName], finalCollection, 'keysChanged', collectionKey);\n                    return {\n                        [subscriber.statePropertyName]: finalCollection,\n                    };\n                });\n                continue;\n            }\n\n            // If a React component is only interested in a single key then we can set the cached value directly to the state name.\n            if (isSubscribedToCollectionMemberKey) {\n                // However, we only want to update this subscriber if the partial data contains a change.\n                // Otherwise, we would update them with a value they already have and trigger an unnecessary re-render.\n                const dataFromCollection = partialCollection[subscriber.key];\n                if (_.isUndefined(dataFromCollection)) {\n                    continue;\n                }\n\n                // If the subscriber has a selector, then the component's state must only be updated with the data\n                // returned by the selector and the state should only change when the subset of data changes from what\n                // it was previously.\n                if (subscriber.selector) {\n                    subscriber.withOnyxInstance.setStateProxy((prevState) => {\n                        const prevData = prevState[subscriber.statePropertyName];\n                        const newData = getSubsetOfData(cachedCollection[subscriber.key], subscriber.selector, subscriber.withOnyxInstance.state);\n                        if (!deepEqual(prevData, newData)) {\n                            PerformanceUtils.logSetStateCall(subscriber, prevData, newData, 'keysChanged', collectionKey);\n                            return {\n                                [subscriber.statePropertyName]: newData,\n                            };\n                        }\n\n                        return null;\n                    });\n                    continue;\n                }\n\n                subscriber.withOnyxInstance.setStateProxy((prevState) => {\n                    const data = cachedCollection[subscriber.key];\n                    const previousData = prevState[subscriber.statePropertyName];\n\n                    // Avoids triggering unnecessary re-renders when feeding empty objects\n                    if (utils.areObjectsEmpty(data, previousData)) {\n                        return null;\n                    }\n                    if (data === previousData) {\n                        return null;\n                    }\n\n                    PerformanceUtils.logSetStateCall(subscriber, previousData, data, 'keysChanged', collectionKey);\n                    return {\n                        [subscriber.statePropertyName]: data,\n                    };\n                });\n            }\n        }\n    }\n}\n\n/**\n * When a key change happens, search for any callbacks matching the key or collection key and trigger those callbacks\n *\n * @example\n * keyChanged(key, value, subscriber => subscriber.initWithStoredValues === false)\n *\n * @private\n * @param {String} key\n * @param {*} data\n * @param {Function} [canUpdateSubscriber] only subscribers that pass this truth test will be updated\n * @param {boolean} [notifyRegularSubscibers=true]\n * @param {boolean} [notifyWithOnyxSubscibers=true]\n */\nfunction keyChanged(key, data, canUpdateSubscriber, notifyRegularSubscibers = true, notifyWithOnyxSubscibers = true) {\n    // Add or remove this key from the recentlyAccessedKeys lists\n    if (!_.isNull(data)) {\n        addLastAccessedKey(key);\n    } else {\n        removeLastAccessedKey(key);\n    }\n\n    // We are iterating over all subscribers to see if they are interested in the key that has just changed. If the subscriber's  key is a collection key then we will\n    // notify them if the key that changed is a collection member. Or if it is a regular key notify them when there is an exact match. Depending on whether the subscriber\n    // was connected via withOnyx we will call setState() directly on the withOnyx instance. If it is a regular connection we will pass the data to the provided callback.\n    const stateMappingKeys = _.keys(callbackToStateMapping);\n    for (let i = 0; i < stateMappingKeys.length; i++) {\n        const subscriber = callbackToStateMapping[stateMappingKeys[i]];\n        if (!subscriber || !isKeyMatch(subscriber.key, key) || (_.isFunction(canUpdateSubscriber) && !canUpdateSubscriber(subscriber))) {\n            continue;\n        }\n\n        // Subscriber is a regular call to connect() and provided a callback\n        if (_.isFunction(subscriber.callback)) {\n            if (!notifyRegularSubscibers) {\n                continue;\n            }\n            if (isCollectionKey(subscriber.key) && subscriber.waitForCollectionCallback) {\n                const cachedCollection = getCachedCollection(subscriber.key);\n                cachedCollection[key] = data;\n                subscriber.callback(cachedCollection);\n                continue;\n            }\n\n            subscriber.callback(data, key);\n            continue;\n        }\n\n        // Subscriber connected via withOnyx() HOC\n        if (subscriber.withOnyxInstance) {\n            if (!notifyWithOnyxSubscibers) {\n                continue;\n            }\n\n            // Check if we are subscribing to a collection key and overwrite the collection member key value in state\n            if (isCollectionKey(subscriber.key)) {\n                // If the subscriber has a selector, then the consumer of this data must only be given the data\n                // returned by the selector and only when the selected data has changed.\n                if (subscriber.selector) {\n                    subscriber.withOnyxInstance.setStateProxy((prevState) => {\n                        const prevData = prevState[subscriber.statePropertyName];\n                        const newData = {\n                            [key]: getSubsetOfData(data, subscriber.selector, subscriber.withOnyxInstance.state),\n                        };\n                        const prevDataWithNewData = {\n                            ...prevData,\n                            ...newData,\n                        };\n                        if (!deepEqual(prevData, prevDataWithNewData)) {\n                            PerformanceUtils.logSetStateCall(subscriber, prevData, newData, 'keyChanged', key);\n                            return {\n                                [subscriber.statePropertyName]: prevDataWithNewData,\n                            };\n                        }\n                        return null;\n                    });\n                    continue;\n                }\n\n                subscriber.withOnyxInstance.setStateProxy((prevState) => {\n                    const collection = prevState[subscriber.statePropertyName] || {};\n                    const newCollection = {\n                        ...collection,\n                        [key]: data,\n                    };\n                    PerformanceUtils.logSetStateCall(subscriber, collection, newCollection, 'keyChanged', key);\n                    return {\n                        [subscriber.statePropertyName]: newCollection,\n                    };\n                });\n                continue;\n            }\n\n            // If the subscriber has a selector, then the component's state must only be updated with the data\n            // returned by the selector and only if the selected data has changed.\n            if (subscriber.selector) {\n                subscriber.withOnyxInstance.setStateProxy((prevState) => {\n                    const previousValue = getSubsetOfData(prevState[subscriber.statePropertyName], subscriber.selector, subscriber.withOnyxInstance.state);\n                    const newValue = getSubsetOfData(data, subscriber.selector, subscriber.withOnyxInstance.state);\n                    if (!deepEqual(previousValue, newValue)) {\n                        return {\n                            [subscriber.statePropertyName]: newValue,\n                        };\n                    }\n                    return null;\n                });\n                continue;\n            }\n\n            // If we did not match on a collection key then we just set the new data to the state property\n            subscriber.withOnyxInstance.setStateProxy((prevState) => {\n                const previousData = prevState[subscriber.statePropertyName];\n\n                // Avoids triggering unnecessary re-renders when feeding empty objects\n                if (utils.areObjectsEmpty(data, previousData)) {\n                    return null;\n                }\n                if (previousData === data) {\n                    return null;\n                }\n\n                PerformanceUtils.logSetStateCall(subscriber, previousData, data, 'keyChanged', key);\n                return {\n                    [subscriber.statePropertyName]: data,\n                };\n            });\n            continue;\n        }\n\n        console.error('Warning: Found a matching subscriber to a key that changed, but no callback or withOnyxInstance could be found.');\n    }\n}\n\n/**\n * Sends the data obtained from the keys to the connection. It either:\n *     - sets state on the withOnyxInstances\n *     - triggers the callback function\n *\n * @private\n * @param {Object} mapping\n * @param {Object} [mapping.withOnyxInstance]\n * @param {String} [mapping.statePropertyName]\n * @param {Function} [mapping.callback]\n * @param {String} [mapping.selector]\n * @param {*|null} val\n * @param {String|undefined} matchedKey\n * @param {Boolean} isBatched\n */\nfunction sendDataToConnection(mapping, val, matchedKey, isBatched) {\n    // If the mapping no longer exists then we should not send any data.\n    // This means our subscriber disconnected or withOnyx wrapped component unmounted.\n    if (!callbackToStateMapping[mapping.connectionID]) {\n        return;\n    }\n\n    if (mapping.withOnyxInstance) {\n        let newData = val;\n\n        // If the mapping has a selector, then the component's state must only be updated with the data\n        // returned by the selector.\n        if (mapping.selector) {\n            if (isCollectionKey(mapping.key)) {\n                newData = reduceCollectionWithSelector(val, mapping.selector, mapping.withOnyxInstance.state);\n            } else {\n                newData = getSubsetOfData(val, mapping.selector, mapping.withOnyxInstance.state);\n            }\n        }\n\n        PerformanceUtils.logSetStateCall(mapping, null, newData, 'sendDataToConnection');\n        if (isBatched) {\n            batchUpdates(() => {\n                mapping.withOnyxInstance.setWithOnyxState(mapping.statePropertyName, newData);\n            });\n        } else {\n            mapping.withOnyxInstance.setWithOnyxState(mapping.statePropertyName, newData);\n        }\n        return;\n    }\n\n    if (_.isFunction(mapping.callback)) {\n        mapping.callback(val, matchedKey);\n    }\n}\n\n/**\n * We check to see if this key is flagged as safe for eviction and add it to the recentlyAccessedKeys list so that when we\n * run out of storage the least recently accessed key can be removed.\n *\n * @private\n * @param {Object} mapping\n */\nfunction addKeyToRecentlyAccessedIfNeeded(mapping) {\n    if (!isSafeEvictionKey(mapping.key)) {\n        return;\n    }\n\n    // Try to free some cache whenever we connect to a safe eviction key\n    cache.removeLeastRecentlyUsedKeys();\n\n    if (mapping.withOnyxInstance && !isCollectionKey(mapping.key)) {\n        // All React components subscribing to a key flagged as a safe eviction key must implement the canEvict property.\n        if (_.isUndefined(mapping.canEvict)) {\n            throw new Error(\n                `Cannot subscribe to safe eviction key '${mapping.key}' without providing a canEvict value.`,\n            );\n        }\n\n        addLastAccessedKey(mapping.key);\n    }\n}\n\n/**\n * Gets the data for a given an array of matching keys, combines them into an object, and sends the result back to the subscriber.\n *\n * @private\n * @param {Array} matchingKeys\n * @param {Object} mapping\n */\nfunction getCollectionDataAndSendAsObject(matchingKeys, mapping) {\n    Promise.all(_.map(matchingKeys, key => get(key)))\n        .then(values => _.reduce(values, (finalObject, value, i) => {\n            // eslint-disable-next-line no-param-reassign\n            finalObject[matchingKeys[i]] = value;\n            return finalObject;\n        }, {}))\n        .then(val => sendDataToConnection(mapping, val, undefined, true));\n}\n\n/**\n * Subscribes a react component's state directly to a store key\n *\n * @example\n * const connectionID = Onyx.connect({\n *     key: ONYXKEYS.SESSION,\n *     callback: onSessionChange,\n * });\n *\n * @param {Object} mapping the mapping information to connect Onyx to the components state\n * @param {String} mapping.key ONYXKEY to subscribe to\n * @param {String} [mapping.statePropertyName] the name of the property in the state to connect the data to\n * @param {Object} [mapping.withOnyxInstance] whose setState() method will be called with any changed data\n *      This is used by React components to connect to Onyx\n * @param {Function} [mapping.callback] a method that will be called with changed data\n *      This is used by any non-React code to connect to Onyx\n * @param {Boolean} [mapping.initWithStoredValues] If set to false, then no data will be prefilled into the\n *  component\n * @param {Boolean} [mapping.waitForCollectionCallback] If set to true, it will return the entire collection to the callback as a single object\n * @param {Function} [mapping.selector] THIS PARAM IS ONLY USED WITH withOnyx(). If included, this will be used to subscribe to a subset of an Onyx key's data.\n *       The sourceData and withOnyx state are passed to the selector and should return the simplified data. Using this setting on `withOnyx` can have very positive\n *       performance benefits because the component will only re-render when the subset of data changes. Otherwise, any change of data on any property would normally\n *       cause the component to re-render (and that can be expensive from a performance standpoint).\n * @param {String | Number | Boolean | Object} [mapping.initialValue] THIS PARAM IS ONLY USED WITH withOnyx().\n * If included, this will be passed to the component so that something can be rendered while data is being fetched from the DB.\n * Note that it will not cause the component to have the loading prop set to true. |\n * @returns {Number} an ID to use when calling disconnect\n */\nfunction connect(mapping) {\n    const connectionID = lastConnectionID++;\n    callbackToStateMapping[connectionID] = mapping;\n    callbackToStateMapping[connectionID].connectionID = connectionID;\n\n    if (mapping.initWithStoredValues === false) {\n        return connectionID;\n    }\n\n    // Commit connection only after init passes\n    deferredInitTask.promise\n        .then(() => addKeyToRecentlyAccessedIfNeeded(mapping))\n        .then(() => {\n            // Performance improvement\n            // If the mapping is connected to an onyx key that is not a collection\n            // we can skip the call to getAllKeys() and return an array with a single item\n            if (Boolean(mapping.key)\n                && typeof mapping.key === 'string'\n                && !(mapping.key.endsWith('_'))\n                && cache.storageKeys.has(mapping.key)\n            ) {\n                return [mapping.key];\n            }\n            return getAllKeys();\n        })\n        .then((keys) => {\n            // We search all the keys in storage to see if any are a \"match\" for the subscriber we are connecting so that we\n            // can send data back to the subscriber. Note that multiple keys can match as a subscriber could either be\n            // subscribed to a \"collection key\" or a single key.\n            const matchingKeys = _.filter(keys, key => isKeyMatch(mapping.key, key));\n\n            // If the key being connected to does not exist we initialize the value with null. For subscribers that connected\n            // directly via connect() they will simply get a null value sent to them without any information about which key matched\n            // since there are none matched. In withOnyx() we wait for all connected keys to return a value before rendering the child\n            // component. This null value will be filtered out so that the connected component can utilize defaultProps.\n            if (matchingKeys.length === 0) {\n                // Here we cannot use batching because the null value is expected to be set immediately for default props\n                // or they will be undefined.\n                sendDataToConnection(mapping, null, undefined, false);\n                return;\n            }\n\n            // When using a callback subscriber we will either trigger the provided callback for each key we find or combine all values\n            // into an object and just make a single call. The latter behavior is enabled by providing a waitForCollectionCallback key\n            // combined with a subscription to a collection key.\n            if (_.isFunction(mapping.callback)) {\n                if (isCollectionKey(mapping.key)) {\n                    if (mapping.waitForCollectionCallback) {\n                        getCollectionDataAndSendAsObject(matchingKeys, mapping);\n                        return;\n                    }\n\n                    // We did not opt into using waitForCollectionCallback mode so the callback is called for every matching key.\n                    for (let i = 0; i < matchingKeys.length; i++) {\n                        get(matchingKeys[i]).then(val => sendDataToConnection(mapping, val, matchingKeys[i], true));\n                    }\n                    return;\n                }\n\n                // If we are not subscribed to a collection key then there's only a single key to send an update for.\n                get(mapping.key).then(val => sendDataToConnection(mapping, val, mapping.key, true));\n                return;\n            }\n\n            // If we have a withOnyxInstance that means a React component has subscribed via the withOnyx() HOC and we need to\n            // group collection key member data into an object.\n            if (mapping.withOnyxInstance) {\n                if (isCollectionKey(mapping.key)) {\n                    getCollectionDataAndSendAsObject(matchingKeys, mapping);\n                    return;\n                }\n\n                // If the subscriber is not using a collection key then we just send a single value back to the subscriber\n                get(mapping.key).then(val => sendDataToConnection(mapping, val, mapping.key, true));\n                return;\n            }\n\n            console.error('Warning: Onyx.connect() was found without a callback or withOnyxInstance');\n        });\n\n    // The connectionID is returned back to the caller so that it can be used to clean up the connection when it's no longer needed\n    // by calling Onyx.disconnect(connectionID).\n    return connectionID;\n}\n\n/**\n * Remove the listener for a react component\n * @example\n * Onyx.disconnect(connectionID);\n *\n * @param {Number} connectionID unique id returned by call to Onyx.connect()\n * @param {String} [keyToRemoveFromEvictionBlocklist]\n */\nfunction disconnect(connectionID, keyToRemoveFromEvictionBlocklist) {\n    if (!callbackToStateMapping[connectionID]) {\n        return;\n    }\n\n    // Remove this key from the eviction block list as we are no longer\n    // subscribing to it and it should be safe to delete again\n    if (keyToRemoveFromEvictionBlocklist) {\n        removeFromEvictionBlockList(keyToRemoveFromEvictionBlocklist, connectionID);\n    }\n\n    delete callbackToStateMapping[connectionID];\n}\n\n/**\n * Schedules an update that will be appended to the macro task queue (so it doesn't update the subscribers immediately).\n *\n * @example\n * scheduleSubscriberUpdate(key, value, subscriber => subscriber.initWithStoredValues === false)\n *\n * @param {String} key\n * @param {*} value\n * @param {Function} [canUpdateSubscriber] only subscribers that pass this truth test will be updated\n * @returns {Promise}\n */\nfunction scheduleSubscriberUpdate(key, value, canUpdateSubscriber) {\n    const promise = Promise.resolve().then(() => keyChanged(key, value, canUpdateSubscriber, true, false));\n    batchUpdates(() => keyChanged(key, value, canUpdateSubscriber, false, true));\n    return Promise.all([maybeFlushBatchUpdates(), promise]);\n}\n\n/**\n * This method is similar to notifySubscribersOnNextTick but it is built for working specifically with collections\n * so that keysChanged() is triggered for the collection and not keyChanged(). If this was not done, then the\n * subscriber callbacks receive the data in a different format than they normally expect and it breaks code.\n *\n * @param {String} key\n * @param {*} value\n * @returns {Promise}\n */\nfunction scheduleNotifyCollectionSubscribers(key, value) {\n    const promise = Promise.resolve().then(() => keysChanged(key, value, true, false));\n    batchUpdates(() => keysChanged(key, value, false, true));\n    return Promise.all([maybeFlushBatchUpdates(), promise]);\n}\n\n/**\n * Remove a key from Onyx and update the subscribers\n *\n * @private\n * @param {String} key\n * @return {Promise}\n */\nfunction remove(key) {\n    cache.drop(key);\n    scheduleSubscriberUpdate(key, null);\n    return Storage.removeItem(key);\n}\n\n/**\n * @private\n * @returns {Promise<void>}\n */\nfunction reportStorageQuota() {\n    return Storage.getDatabaseSize()\n        .then(({bytesUsed, bytesRemaining}) => {\n            Logger.logInfo(`Storage Quota Check -- bytesUsed: ${bytesUsed} bytesRemaining: ${bytesRemaining}`);\n        })\n        .catch((dbSizeError) => {\n            Logger.logAlert(`Unable to get database size. Error: ${dbSizeError}`);\n        });\n}\n\n/**\n * If we fail to set or merge we must handle this by\n * evicting some data from Onyx and then retrying to do\n * whatever it is we attempted to do.\n *\n * @private\n * @param {Error} error\n * @param {Function} onyxMethod\n * @param  {...any} args\n * @return {Promise}\n */\nfunction evictStorageAndRetry(error, onyxMethod, ...args) {\n    Logger.logInfo(`Failed to save to storage. Error: ${error}. onyxMethod: ${onyxMethod.name}`);\n\n    if (error && Str.startsWith(error.message, 'Failed to execute \\'put\\' on \\'IDBObjectStore\\'')) {\n        Logger.logAlert('Attempted to set invalid data set in Onyx. Please ensure all data is serializable.');\n        throw error;\n    }\n\n    // Find the first key that we can remove that has no subscribers in our blocklist\n    const keyForRemoval = _.find(recentlyAccessedKeys, key => !evictionBlocklist[key]);\n    if (!keyForRemoval) {\n        // If we have no acceptable keys to remove then we are possibly trying to save mission critical data. If this is the case,\n        // then we should stop retrying as there is not much the user can do to fix this. Instead of getting them stuck in an infinite loop we\n        // will allow this write to be skipped.\n        Logger.logAlert('Out of storage. But found no acceptable keys to remove.');\n        return reportStorageQuota();\n    }\n\n    // Remove the least recently viewed key that is not currently being accessed and retry.\n    Logger.logInfo(`Out of storage. Evicting least recently accessed key (${keyForRemoval}) and retrying.`);\n    reportStorageQuota();\n    return remove(keyForRemoval)\n        .then(() => onyxMethod(...args));\n}\n\n/**\n * Notifys subscribers and writes current value to cache\n *\n * @param {String} key\n * @param {*} value\n * @param {Boolean} hasChanged\n * @param {String} method\n * @returns {Promise}\n */\nfunction broadcastUpdate(key, value, hasChanged, method) {\n    // Logging properties only since values could be sensitive things we don't want to log\n    Logger.logInfo(`${method}() called for key: ${key}${_.isObject(value) ? ` properties: ${_.keys(value).join(',')}` : ''}`);\n\n    // Update subscribers if the cached value has changed, or when the subscriber specifically requires\n    // all updates regardless of value changes (indicated by initWithStoredValues set to false).\n    if (hasChanged) {\n        cache.set(key, value);\n    } else {\n        cache.addToAccessedKeys(key);\n    }\n\n    return scheduleSubscriberUpdate(key, value, subscriber => hasChanged || subscriber.initWithStoredValues === false);\n}\n\n/**\n * @param {String} key\n * @returns {Boolean}\n */\nfunction hasPendingMergeForKey(key) {\n    return Boolean(mergeQueue[key]);\n}\n\n/**\n * Removes a key from storage if the value is null.\n * Otherwise removes all nested null values in objects and returns the object\n * @param {String} key\n * @param {Mixed} value\n * @returns {Mixed} `null` if the key got removed completely, otherwise the value without null values\n */\nfunction removeNullValues(key, value) {\n    if (_.isNull(value)) {\n        remove(key);\n        return null;\n    }\n\n    // We can remove all null values in an object by merging it with itself\n    // utils.fastMerge recursively goes through the object and removes all null values\n    // Passing two identical objects as source and target to fastMerge will not change it, but only remove the null values\n    return utils.removeNestedNullValues(value);\n}\n\n/**\n * Write a value to our store with the given key\n *\n * @param {String} key ONYXKEY to set\n * @param {*} value value to store\n *\n * @returns {Promise}\n */\nfunction set(key, value) {\n    const valueWithoutNull = removeNullValues(key, value);\n\n    if (valueWithoutNull === null) {\n        return Promise.resolve();\n    }\n\n    if (hasPendingMergeForKey(key)) {\n        Logger.logAlert(`Onyx.set() called after Onyx.merge() for key: ${key}. It is recommended to use set() or merge() not both.`);\n    }\n\n    const hasChanged = cache.hasValueChanged(key, valueWithoutNull);\n\n    // This approach prioritizes fast UI changes without waiting for data to be stored in device storage.\n    const updatePromise = broadcastUpdate(key, valueWithoutNull, hasChanged, 'set');\n\n    // If the value has not changed, calling Storage.setItem() would be redundant and a waste of performance, so return early instead.\n    if (!hasChanged) {\n        return updatePromise;\n    }\n\n    return Storage.setItem(key, valueWithoutNull)\n        .catch(error => evictStorageAndRetry(error, set, key, valueWithoutNull))\n        .then(() => updatePromise);\n}\n\n/**\n * Storage expects array like: [[\"@MyApp_user\", value_1], [\"@MyApp_key\", value_2]]\n * This method transforms an object like {'@MyApp_user': myUserValue, '@MyApp_key': myKeyValue}\n * to an array of key-value pairs in the above format\n * @private\n * @param {Record} data\n * @return {Array} an array of key - value pairs <[key, value]>\n */\nfunction prepareKeyValuePairsForStorage(data) {\n    return _.map(data, (value, key) => [key, value]);\n}\n\n/**\n * Sets multiple keys and values\n *\n * @example Onyx.multiSet({'key1': 'a', 'key2': 'b'});\n *\n * @param {Object} data object keyed by ONYXKEYS and the values to set\n * @returns {Promise}\n */\nfunction multiSet(data) {\n    const keyValuePairs = prepareKeyValuePairsForStorage(data);\n\n    const updatePromises = _.map(data, (val, key) => {\n        // Update cache and optimistically inform subscribers on the next tick\n        cache.set(key, val);\n        return scheduleSubscriberUpdate(key, val);\n    });\n\n    const keyValuePairsWithoutNull = _.filter(_.map(keyValuePairs, ([key, value]) => {\n        const valueWithoutNull = removeNullValues(key, value);\n\n        if (valueWithoutNull === null) {\n            return;\n        }\n        return [key, valueWithoutNull];\n    }), Boolean);\n\n    return Storage.multiSet(keyValuePairsWithoutNull)\n        .catch(error => evictStorageAndRetry(error, multiSet, data))\n        .then(() => Promise.all(updatePromises));\n}\n\n/**\n * Merges an array of changes with an existing value\n *\n * @private\n * @param {*} existingValue\n * @param {Array<*>} changes Array of changes that should be applied to the existing value\n * @param {Boolean} shouldRemoveNullObjectValues\n * @returns {*}\n */\nfunction applyMerge(existingValue, changes, shouldRemoveNullObjectValues) {\n    const lastChange = _.last(changes);\n\n    if (_.isArray(lastChange)) {\n        return lastChange;\n    }\n\n    if (_.some(changes, _.isObject)) {\n        // Object values are then merged one after the other\n        return _.reduce(changes, (modifiedData, change) => utils.fastMerge(modifiedData, change, shouldRemoveNullObjectValues),\n            existingValue || {});\n    }\n\n    // If we have anything else we can't merge it so we'll\n    // simply return the last value that was queued\n    return lastChange;\n}\n\n/**\n * Merge a new value into an existing value at a key.\n *\n * The types of values that can be merged are `Object` and `Array`. To set another type of value use `Onyx.set()`.\n * Values of type `Object` get merged with the old value, whilst for `Array`'s we simply replace the current value with the new one.\n *\n * Calls to `Onyx.merge()` are batched so that any calls performed in a single tick will stack in a queue and get\n * applied in the order they were called. Note: `Onyx.set()` calls do not work this way so use caution when mixing\n * `Onyx.merge()` and `Onyx.set()`.\n *\n * @example\n * Onyx.merge(ONYXKEYS.EMPLOYEE_LIST, ['Joe']); // -> ['Joe']\n * Onyx.merge(ONYXKEYS.EMPLOYEE_LIST, ['Jack']); // -> ['Joe', 'Jack']\n * Onyx.merge(ONYXKEYS.POLICY, {id: 1}); // -> {id: 1}\n * Onyx.merge(ONYXKEYS.POLICY, {name: 'My Workspace'}); // -> {id: 1, name: 'My Workspace'}\n *\n * @param {String} key ONYXKEYS key\n * @param {(Object|Array)} changes Object or Array value to merge\n * @returns {Promise}\n */\nfunction merge(key, changes) {\n    // Top-level undefined values are ignored\n    // Therefore we need to prevent adding them to the merge queue\n    if (_.isUndefined(changes)) {\n        return mergeQueue[key] ? mergeQueuePromise[key] : Promise.resolve();\n    }\n\n    // Merge attempts are batched together. The delta should be applied after a single call to get() to prevent a race condition.\n    // Using the initial value from storage in subsequent merge attempts will lead to an incorrect final merged value.\n    if (mergeQueue[key]) {\n        mergeQueue[key].push(changes);\n        return mergeQueuePromise[key];\n    }\n    mergeQueue[key] = [changes];\n\n    mergeQueuePromise[key] = get(key)\n        .then((existingValue) => {\n            try {\n                // We first only merge the changes, so we can provide these to the native implementation (SQLite uses only delta changes in \"JSON_PATCH\" to merge)\n                // We don't want to remove null values from the \"batchedChanges\", because SQLite uses them to remove keys from storage natively.\n                let batchedChanges = applyMerge(undefined, mergeQueue[key], false);\n\n                if (_.isNull(batchedChanges)) {\n                    remove(key);\n                    return;\n                }\n\n                // The presence of a `null` in the merge queue instructs us to drop the existing value.\n                // In this case, we can't simply merge the batched changes with the existing value, because then the null in the merge queue would have no effect\n                const shouldOverwriteExistingValue = _.includes(mergeQueue[key], null);\n\n                // Clean up the write queue, so we don't apply these changes again\n                delete mergeQueue[key];\n                delete mergeQueuePromise[key];\n\n                // After that we merge the batched changes with the existing value\n                // We can remove null values from the \"modifiedData\", because \"null\" implicates that the user wants to remove a value from storage.\n                // The \"modifiedData\" will be directly \"set\" in storage instead of being merged\n                const modifiedData = shouldOverwriteExistingValue ? batchedChanges : applyMerge(existingValue, [batchedChanges], true);\n\n                // On native platforms we use SQLite which utilises JSON_PATCH to merge changes.\n                // JSON_PATCH generally removes null values from the stored object.\n                // When there is no existing value though, SQLite will just insert the changes as a new value and thus the null values won't be removed.\n                // Therefore we need to remove null values from the `batchedChanges` which are sent to the SQLite, if no existing value is present.\n                if (!existingValue) {\n                    batchedChanges = applyMerge(undefined, [batchedChanges], true);\n                }\n\n                const hasChanged = cache.hasValueChanged(key, modifiedData);\n\n                // This approach prioritizes fast UI changes without waiting for data to be stored in device storage.\n                const updatePromise = broadcastUpdate(key, modifiedData, hasChanged, 'merge');\n\n                // If the value has not changed, calling Storage.setItem() would be redundant and a waste of performance, so return early instead.\n                if (!hasChanged) {\n                    return updatePromise;\n                }\n\n                return Storage.mergeItem(key, batchedChanges, modifiedData)\n                    .then(() => updatePromise);\n            } catch (error) {\n                Logger.logAlert(`An error occurred while applying merge for key: ${key}, Error: ${error}`);\n                return Promise.resolve();\n            }\n        });\n\n    return mergeQueuePromise[key];\n}\n\n/**\n * Merge user provided default key value pairs.\n * @private\n * @returns {Promise}\n */\nfunction initializeWithDefaultKeyStates() {\n    return Storage.multiGet(_.keys(defaultKeyStates))\n        .then((pairs) => {\n            const asObject = _.object(pairs);\n\n            const merged = utils.fastMerge(asObject, defaultKeyStates);\n            cache.merge(merged);\n            _.each(merged, (val, key) => keyChanged(key, val));\n        });\n}\n\n/**\n * Clear out all the data in the store\n *\n * Note that calling Onyx.clear() and then Onyx.set() on a key with a default\n * key state may store an unexpected value in Storage.\n *\n * E.g.\n * Onyx.clear();\n * Onyx.set(ONYXKEYS.DEFAULT_KEY, 'default');\n * Storage.getItem(ONYXKEYS.DEFAULT_KEY)\n *     .then((storedValue) => console.log(storedValue));\n * null is logged instead of the expected 'default'\n *\n * Onyx.set() might call Storage.setItem() before Onyx.clear() calls\n * Storage.setItem(). Use Onyx.merge() instead if possible. Onyx.merge() calls\n * Onyx.get(key) before calling Storage.setItem() via Onyx.set().\n * Storage.setItem() from Onyx.clear() will have already finished and the merged\n * value will be saved to storage after the default value.\n *\n * @param {Array} keysToPreserve is a list of ONYXKEYS that should not be cleared with the rest of the data\n * @returns {Promise<void>}\n */\nfunction clear(keysToPreserve = []) {\n    return getAllKeys()\n        .then((keys) => {\n            const keysToBeClearedFromStorage = [];\n            const keyValuesToResetAsCollection = {};\n            const keyValuesToResetIndividually = {};\n\n            // The only keys that should not be cleared are:\n            // 1. Anything specifically passed in keysToPreserve (because some keys like language preferences, offline\n            //      status, or activeClients need to remain in Onyx even when signed out)\n            // 2. Any keys with a default state (because they need to remain in Onyx as their default, and setting them\n            //      to null would cause unknown behavior)\n            _.each(keys, (key) => {\n                const isKeyToPreserve = _.contains(keysToPreserve, key);\n                const isDefaultKey = _.has(defaultKeyStates, key);\n\n                // If the key is being removed or reset to default:\n                // 1. Update it in the cache\n                // 2. Figure out whether it is a collection key or not,\n                //      since collection key subscribers need to be updated differently\n                if (!isKeyToPreserve) {\n                    const oldValue = cache.getValue(key);\n                    const newValue = _.get(defaultKeyStates, key, null);\n                    if (newValue !== oldValue) {\n                        cache.set(key, newValue);\n                        const collectionKey = key.substring(0, key.indexOf('_') + 1);\n                        if (collectionKey) {\n                            if (!keyValuesToResetAsCollection[collectionKey]) {\n                                keyValuesToResetAsCollection[collectionKey] = {};\n                            }\n                            keyValuesToResetAsCollection[collectionKey][key] = newValue;\n                        } else {\n                            keyValuesToResetIndividually[key] = newValue;\n                        }\n                    }\n                }\n\n                if (isKeyToPreserve || isDefaultKey) {\n                    return;\n                }\n\n                // If it isn't preserved and doesn't have a default, we'll remove it\n                keysToBeClearedFromStorage.push(key);\n            });\n\n            const updatePromises = [];\n\n            // Notify the subscribers for each key/value group so they can receive the new values\n            _.each(keyValuesToResetIndividually, (value, key) => {\n                updatePromises.push(scheduleSubscriberUpdate(key, value));\n            });\n            _.each(keyValuesToResetAsCollection, (value, key) => {\n                updatePromises.push(scheduleNotifyCollectionSubscribers(key, value));\n            });\n\n            const defaultKeyValuePairs = _.pairs(_.omit(defaultKeyStates, keysToPreserve));\n\n            // Remove only the items that we want cleared from storage, and reset others to default\n            _.each(keysToBeClearedFromStorage, key => cache.drop(key));\n            return Storage.removeItems(keysToBeClearedFromStorage).then(() => Storage.multiSet(defaultKeyValuePairs)).then(() => Promise.all(updatePromises));\n        });\n}\n\n/**\n * Merges a collection based on their keys\n *\n * @example\n *\n * Onyx.mergeCollection(ONYXKEYS.COLLECTION.REPORT, {\n *     [`${ONYXKEYS.COLLECTION.REPORT}1`]: report1,\n *     [`${ONYXKEYS.COLLECTION.REPORT}2`]: report2,\n * });\n *\n * @param {String} collectionKey e.g. `ONYXKEYS.COLLECTION.REPORT`\n * @param {Object} collection Object collection keyed by individual collection member keys and values\n * @returns {Promise}\n */\nfunction mergeCollection(collectionKey, collection) {\n    if (!_.isObject(collection) || _.isArray(collection) || _.isEmpty(collection)) {\n        Logger.logInfo('mergeCollection() called with invalid or empty value. Skipping this update.');\n        return Promise.resolve();\n    }\n\n    // Confirm all the collection keys belong to the same parent\n    let hasCollectionKeyCheckFailed = false;\n    _.each(collection, (_data, dataKey) => {\n        if (isKeyMatch(collectionKey, dataKey)) {\n            return;\n        }\n\n        if (process.env.NODE_ENV === 'development') {\n            throw new Error(`Provided collection doesn't have all its data belonging to the same parent. CollectionKey: ${collectionKey}, DataKey: ${dataKey}`);\n        }\n\n        hasCollectionKeyCheckFailed = true;\n        Logger.logAlert(`Provided collection doesn't have all its data belonging to the same parent. CollectionKey: ${collectionKey}, DataKey: ${dataKey}`);\n    });\n\n    // Gracefully handle bad mergeCollection updates so it doesn't block the merge queue\n    if (hasCollectionKeyCheckFailed) {\n        return Promise.resolve();\n    }\n\n    return getAllKeys()\n        .then((persistedKeys) => {\n            // Split to keys that exist in storage and keys that don't\n            const [existingKeys, newKeys] = _.chain(collection)\n                .pick((value, key) => {\n                    if (_.isNull(value)) {\n                        remove(key);\n                        return false;\n                    }\n                    return true;\n                })\n                .keys()\n                .partition(key => persistedKeys.includes(key))\n                .value();\n\n            const existingKeyCollection = _.pick(collection, existingKeys);\n            const newCollection = _.pick(collection, newKeys);\n            const keyValuePairsForExistingCollection = prepareKeyValuePairsForStorage(existingKeyCollection);\n            const keyValuePairsForNewCollection = prepareKeyValuePairsForStorage(newCollection);\n\n            const promises = [];\n\n            // New keys will be added via multiSet while existing keys will be updated using multiMerge\n            // This is because setting a key that doesn't exist yet with multiMerge will throw errors\n            if (keyValuePairsForExistingCollection.length > 0) {\n                promises.push(Storage.multiMerge(keyValuePairsForExistingCollection));\n            }\n\n            if (keyValuePairsForNewCollection.length > 0) {\n                promises.push(Storage.multiSet(keyValuePairsForNewCollection));\n            }\n\n            // Prefill cache if necessary by calling get() on any existing keys and then merge original data to cache\n            // and update all subscribers\n            const promiseUpdate = Promise.all(_.map(existingKeys, get)).then(() => {\n                cache.merge(collection);\n                return scheduleNotifyCollectionSubscribers(collectionKey, collection);\n            });\n\n            return Promise.all(promises)\n                .catch(error => evictStorageAndRetry(error, mergeCollection, collection))\n                .then(() => promiseUpdate);\n        });\n}\n\nlet queue = [];\n\n/**\n * Insert API responses and lifecycle data into Onyx\n *\n * @param {Array} data An array of objects with shape {onyxMethod: oneOf('set', 'merge', 'mergeCollection', 'multiSet', 'clear'), key: string, value: *}\n * @returns {Promise} resolves when all operations are complete\n */\nfunction update(data) {\n    // First, validate the Onyx object is in the format we expect\n    _.each(data, ({onyxMethod, key, value}) => {\n        if (!_.contains([METHOD.CLEAR, METHOD.SET, METHOD.MERGE, METHOD.MERGE_COLLECTION, METHOD.MULTI_SET], onyxMethod)) {\n            throw new Error(`Invalid onyxMethod ${onyxMethod} in Onyx update.`);\n        }\n        if (onyxMethod === METHOD.MULTI_SET) {\n            // For multiset, we just expect the value to be an object\n            if (!_.isObject(value) || _.isArray(value) || _.isFunction(value)) {\n                throw new Error('Invalid value provided in Onyx multiSet. Onyx multiSet value must be of type object.');\n            }\n        } else if (onyxMethod !== METHOD.CLEAR && !_.isString(key)) {\n            throw new Error(`Invalid ${typeof key} key provided in Onyx update. Onyx key must be of type string.`);\n        }\n\n        // Look for an existing promise for this key\n        const existingPromise = _.find(queue, item => item.key === key);\n\n        // If we found one, we merge with the existing update, otherwise we add a new one\n        if (existingPromise) {\n            existingPromise.value = _.defaults(value, existingPromise.value);\n        } else {\n        // Create an update operation with a pending promise\n            const pendingUpdate = {\n                onyxMethod,\n                key,\n                value,\n                promise: Promise.resolve().then(() => {\n                    switch (onyxMethod) {\n                        case METHOD.SET: return set(key, value);\n                        case METHOD.MERGE: return merge(key, value);\n                        case METHOD.MERGE_COLLECTION: return mergeCollection(key, value);\n                        case METHOD.MULTI_SET: return multiSet(value);\n                        case METHOD.CLEAR: return clear();\n                        default: return Promise.resolve();\n                    }\n                }).then(() => {\n                    // Once the promise is resolved, remove it from the queue\n                    queue = _.reject(queue, item => item.key === key);\n                }),\n            };\n\n            // Add it to the queue\n            queue.push(pendingUpdate);\n        }\n    });\n\n    // Return a promise that resolves when all our promises are complete\n    return Promise.all(_.map(queue, item => item.promise));\n}\n\n/**\n * When set these keys will not be persisted to storage\n * @param {string[]} keyList\n */\nfunction setMemoryOnlyKeys(keyList) {\n    Storage.setMemoryOnlyKeys(keyList);\n\n    // When in memory only mode for certain keys we do not want to ever drop items from the cache as the user will have no way to recover them again via storage.\n    cache.setRecentKeysLimit(Infinity);\n}\n\n/**\n * Initialize the store with actions and listening for storage events\n *\n * @param {Object} [options={}] config object\n * @param {Object} [options.keys={}] `ONYXKEYS` constants object\n * @param {Object} [options.initialKeyStates={}] initial data to set when `init()` and `clear()` is called\n * @param {String[]} [options.safeEvictionKeys=[]] This is an array of keys\n * (individual or collection patterns) that when provided to Onyx are flagged\n * as \"safe\" for removal. Any components subscribing to these keys must also\n * implement a canEvict option. See the README for more info.\n * @param {Number} [options.maxCachedKeysCount=55] Sets how many recent keys should we try to keep in cache\n * Setting this to 0 would practically mean no cache\n * We try to free cache when we connect to a safe eviction key\n * @param {Boolean} [options.captureMetrics] Enables Onyx benchmarking and exposes the get/print/reset functions\n * @param {Boolean} [options.shouldSyncMultipleInstances] Auto synchronize storage events between multiple instances\n * of Onyx running in different tabs/windows. Defaults to true for platforms that support local storage (web/desktop)\n * @param {Boolean} [options.debugSetState] Enables debugging setState() calls to connected components.\n * @example\n * Onyx.init({\n *     keys: ONYXKEYS,\n *     initialKeyStates: {\n *         [ONYXKEYS.SESSION]: {loading: false},\n *     },\n * });\n */\nfunction init({\n    keys = {},\n    initialKeyStates = {},\n    safeEvictionKeys = [],\n    maxCachedKeysCount = 1000,\n    captureMetrics = false,\n    shouldSyncMultipleInstances = Boolean(global.localStorage),\n    debugSetState = false,\n} = {}) {\n    if (captureMetrics) {\n        // The code here is only bundled and applied when the captureMetrics is set\n        // eslint-disable-next-line no-use-before-define\n        applyDecorators();\n    }\n\n    if (debugSetState) {\n        PerformanceUtils.setShouldDebugSetState(true);\n    }\n\n    if (maxCachedKeysCount > 0) {\n        cache.setRecentKeysLimit(maxCachedKeysCount);\n    }\n\n    // We need the value of the collection keys later for checking if a\n    // key is a collection. We store it in a map for faster lookup.\n    const collectionValues = _.values(keys.COLLECTION);\n    onyxCollectionKeyMap = _.reduce(collectionValues, (acc, val) => {\n        acc.set(val, true);\n        return acc;\n    }, new Map());\n\n    // Set our default key states to use when initializing and clearing Onyx data\n    defaultKeyStates = initialKeyStates;\n\n    // Let Onyx know about which keys are safe to evict\n    evictionAllowList = safeEvictionKeys;\n\n    // Initialize all of our keys with data provided then give green light to any pending connections\n    Promise.all([\n        addAllSafeEvictionKeysToRecentlyAccessedList(),\n        initializeWithDefaultKeyStates(),\n    ])\n        .then(deferredInitTask.resolve);\n\n    if (shouldSyncMultipleInstances && _.isFunction(Storage.keepInstancesSync)) {\n        Storage.keepInstancesSync((key, value) => {\n            cache.set(key, value);\n            keyChanged(key, value);\n        });\n    }\n}\n\nconst Onyx = {\n    connect,\n    disconnect,\n    set,\n    multiSet,\n    merge,\n    mergeCollection,\n    update,\n    clear,\n    getAllKeys,\n    init,\n    registerLogger: Logger.registerLogger,\n    addToEvictionBlockList,\n    removeFromEvictionBlockList,\n    isSafeEvictionKey,\n    METHOD,\n    setMemoryOnlyKeys,\n    tryGetCachedValue,\n    hasPendingMergeForKey,\n};\n\n/**\n * Apply calls statistic decorators to benchmark Onyx\n *\n * @private\n */\nfunction applyDecorators() {\n    // We're requiring the script dynamically here so that it's only evaluated when decorators are used\n    const decorate = require('./metrics');\n\n    // Re-assign with decorated functions\n    /* eslint-disable no-func-assign */\n    get = decorate.decorateWithMetrics(get, 'Onyx:get');\n    set = decorate.decorateWithMetrics(set, 'Onyx:set');\n    multiSet = decorate.decorateWithMetrics(multiSet, 'Onyx:multiSet');\n    clear = decorate.decorateWithMetrics(clear, 'Onyx:clear');\n    merge = decorate.decorateWithMetrics(merge, 'Onyx:merge');\n    mergeCollection = decorate.decorateWithMetrics(mergeCollection, 'Onyx:mergeCollection');\n    getAllKeys = decorate.decorateWithMetrics(getAllKeys, 'Onyx:getAllKeys');\n    initializeWithDefaultKeyStates = decorate.decorateWithMetrics(initializeWithDefaultKeyStates, 'Onyx:defaults');\n    update = decorate.decorateWithMetrics(update, 'Onyx:update');\n    /* eslint-enable */\n\n    // Re-expose decorated methods\n    /* eslint-disable rulesdir/prefer-actions-set-data */\n    Onyx.set = set;\n    Onyx.multiSet = multiSet;\n    Onyx.clear = clear;\n    Onyx.merge = merge;\n    Onyx.mergeCollection = mergeCollection;\n    Onyx.update = update;\n    /* eslint-enable */\n\n    // Expose stats methods on Onyx\n    Onyx.getMetrics = decorate.getMetrics;\n    Onyx.resetMetrics = decorate.resetMetrics;\n    Onyx.printMetrics = decorate.printMetrics;\n}\n\nexport default Onyx;\n","import _ from 'underscore';\nimport {deepEqual} from 'fast-equals';\nimport utils from './utils';\n\nconst isDefined = _.negate(_.isUndefined);\n\n/**\n * In memory cache providing data by reference\n * Encapsulates Onyx cache related functionality\n */\nclass OnyxCache {\n    constructor() {\n        /**\n         * @private\n         * Cache of all the storage keys available in persistent storage\n         * @type {Set<string>}\n         */\n        this.storageKeys = new Set();\n\n        /**\n         * @private\n         * Unique list of keys maintained in access order (most recent at the end)\n         * @type {Set<string>}\n         */\n        this.recentKeys = new Set();\n\n        /**\n         * @private\n         * A map of cached values\n         * @type {Record<string, *>}\n         */\n        this.storageMap = {};\n\n        /**\n         * @private\n         * Captured pending tasks for already running storage methods\n         * Using a map yields better performance on operations such a delete\n         * https://www.zhenghao.io/posts/object-vs-map\n         * @type {Map<string, Promise>}\n         */\n        this.pendingPromises = new Map();\n\n        // bind all public methods to prevent problems with `this`\n        _.bindAll(\n            this,\n            'getAllKeys', 'getValue', 'hasCacheForKey', 'addKey', 'set', 'drop', 'merge',\n            'hasPendingTask', 'getTaskPromise', 'captureTask', 'removeLeastRecentlyUsedKeys',\n            'setRecentKeysLimit',\n        );\n    }\n\n    /**\n     * Get all the storage keys\n     * @returns {string[]}\n     */\n    getAllKeys() {\n        return Array.from(this.storageKeys);\n    }\n\n    /**\n     * Get a cached value from storage\n     * @param {string} key\n     * @returns {*}\n     */\n    getValue(key) {\n        this.addToAccessedKeys(key);\n        return this.storageMap[key];\n    }\n\n    /**\n     * Check whether cache has data for the given key\n     * @param {string} key\n     * @returns {boolean}\n     */\n    hasCacheForKey(key) {\n        return isDefined(this.storageMap[key]);\n    }\n\n    /**\n     * Saves a key in the storage keys list\n     * Serves to keep the result of `getAllKeys` up to date\n     * @param {string} key\n     */\n    addKey(key) {\n        this.storageKeys.add(key);\n    }\n\n    /**\n     * Set's a key value in cache\n     * Adds the key to the storage keys list as well\n     * @param {string} key\n     * @param {*} value\n     * @returns {*} value - returns the cache value\n     */\n    set(key, value) {\n        this.addKey(key);\n        this.addToAccessedKeys(key);\n        this.storageMap[key] = value;\n\n        return value;\n    }\n\n    /**\n     * Forget the cached value for the given key\n     * @param {string} key\n     */\n    drop(key) {\n        delete this.storageMap[key];\n        this.storageKeys.delete(key);\n        this.recentKeys.delete(key);\n    }\n\n    /**\n     * Deep merge data to cache, any non existing keys will be created\n     * @param {Record<string, *>} data - a map of (cache) key - values\n     */\n    merge(data) {\n        if (!_.isObject(data) || _.isArray(data)) {\n            throw new Error('data passed to cache.merge() must be an Object of onyx key/value pairs');\n        }\n\n        // lodash adds a small overhead so we don't use it here\n        // eslint-disable-next-line prefer-object-spread, rulesdir/prefer-underscore-method\n        this.storageMap = Object.assign({}, utils.fastMerge(this.storageMap, data));\n\n        const storageKeys = this.getAllKeys();\n        const mergedKeys = _.keys(data);\n        this.storageKeys = new Set([...storageKeys, ...mergedKeys]);\n        _.each(mergedKeys, key => this.addToAccessedKeys(key));\n    }\n\n    /**\n     * Check whether the given task is already running\n     * @param {string} taskName - unique name given for the task\n     * @returns {*}\n     */\n    hasPendingTask(taskName) {\n        return isDefined(this.pendingPromises.get(taskName));\n    }\n\n    /**\n     * Use this method to prevent concurrent calls for the same thing\n     * Instead of calling the same task again use the existing promise\n     * provided from this function\n     * @template T\n     * @param {string} taskName - unique name given for the task\n     * @returns {Promise<T>}\n     */\n    getTaskPromise(taskName) {\n        return this.pendingPromises.get(taskName);\n    }\n\n    /**\n     * Capture a promise for a given task so other caller can\n     * hook up to the promise if it's still pending\n     * @template T\n     * @param {string} taskName - unique name for the task\n     * @param {Promise<T>} promise\n     * @returns {Promise<T>}\n     */\n    captureTask(taskName, promise) {\n        const returnPromise = promise.finally(() => {\n            this.pendingPromises.delete(taskName);\n        });\n\n        this.pendingPromises.set(taskName, returnPromise);\n\n        return returnPromise;\n    }\n\n    /**\n     * @private\n     * Adds a key to the top of the recently accessed keys\n     * @param {string} key\n     */\n    addToAccessedKeys(key) {\n        // Removing and re-adding a key ensures it's at the end of the list\n        this.recentKeys.delete(key);\n        this.recentKeys.add(key);\n    }\n\n    /**\n     * Remove keys that don't fall into the range of recently used keys\n     */\n    removeLeastRecentlyUsedKeys() {\n        let numKeysToRemove = this.recentKeys.size - this.maxRecentKeysSize;\n        if (numKeysToRemove <= 0) {\n            return;\n        }\n        const iterator = this.recentKeys.values();\n        const temp = [];\n        while (numKeysToRemove > 0) {\n            const value = iterator.next().value;\n            temp.push(value);\n            numKeysToRemove--;\n        }\n\n        for (let i = 0; i < temp.length; ++i) {\n            delete this.storageMap[temp[i]];\n            this.recentKeys.delete(temp[i]);\n        }\n    }\n\n    /**\n     * Set the recent keys list size\n     * @param {number} limit\n     */\n    setRecentKeysLimit(limit) {\n        this.maxRecentKeysSize = limit;\n    }\n\n    /**\n     * @param {String} key\n     * @param {*} value\n     * @returns {Boolean}\n     */\n    hasValueChanged(key, value) {\n        return !deepEqual(this.storageMap[key], value);\n    }\n}\n\nconst instance = new OnyxCache();\n\nexport default instance;\n","import _ from 'underscore';\n\n/**\n * Returns true if the haystack begins with the needle\n *\n * @param {String} haystack  The full string to be searched\n * @param {String} needle    The case-sensitive string to search for\n * @return {Boolean} Returns true if the haystack starts with the needle.\n */\nfunction startsWith(haystack, needle) {\n    return _.isString(haystack)\n                && _.isString(needle)\n                && haystack.startsWith(needle);\n}\n\n/**\n * Checks if parameter is a string or function.\n * If it is a string, then we will just return it.\n * If it is a function, then we will call it with\n * any additional arguments and return the result.\n *\n * @param {String|Function} parameter\n * @returns {*}\n */\nfunction result(parameter, ...args) {\n    return _.isFunction(parameter) ? parameter(...args) : parameter;\n}\n\nexport {startsWith, result};\n","import {unstable_batchedUpdates} from 'react-dom';\n\nexport default unstable_batchedUpdates;\n","/**\n * Create a deferred task that can be resolved when we call `resolve()`\n * The returned promise will complete when we call `resolve`\n * Useful when we want to wait for a tasks that is resolved from an external action\n *\n * @template T\n * @returns {{ resolve: function(*), promise: Promise<T|void> }}\n */\nexport default function createDeferredTask() {\n    const deferred = {};\n    deferred.promise = new Promise((res) => {\n        deferred.resolve = res;\n    });\n\n    return deferred;\n}\n","import lodashTransform from 'lodash/transform';\nimport _ from 'underscore';\n\nlet debugSetState = false;\n\n/**\n * @param {Boolean} debug\n */\nfunction setShouldDebugSetState(debug) {\n    debugSetState = debug;\n}\n\n/**\n * Deep diff between two objects. Useful for figuring out what changed about an object from one render to the next so\n * that state and props updates can be optimized.\n *\n * @param  {Object} object\n * @param  {Object} base\n * @return {Object}\n */\nfunction diffObject(object, base) {\n    function changes(obj, comparisonObject) {\n        return lodashTransform(obj, (result, value, key) => {\n            if (_.isEqual(value, comparisonObject[key])) {\n                return;\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            result[key] = (_.isObject(value) && _.isObject(comparisonObject[key]))\n                ? changes(value, comparisonObject[key])\n                : value;\n        });\n    }\n    return changes(object, base);\n}\n\n/**\n * Provide insights into why a setState() call occurred by diffing the before and after values.\n *\n * @param {Object} mapping\n * @param {*} previousValue\n * @param {*} newValue\n * @param {String} caller\n * @param {String} [keyThatChanged]\n */\nfunction logSetStateCall(mapping, previousValue, newValue, caller, keyThatChanged) {\n    if (!debugSetState) {\n        return;\n    }\n\n    const logParams = {};\n    if (keyThatChanged) {\n        logParams.keyThatChanged = keyThatChanged;\n    }\n    if (_.isObject(newValue) && _.isObject(previousValue)) {\n        logParams.difference = diffObject(previousValue, newValue);\n    } else {\n        logParams.previousValue = previousValue;\n        logParams.newValue = newValue;\n    }\n\n    console.debug(`[Onyx-Debug] ${mapping.displayName} setState() called. Subscribed to key '${mapping.key}' (${caller})`, logParams);\n}\n\nexport {\n    logSetStateCall,\n    setShouldDebugSetState,\n};\n","// For web-only implementations of Onyx, this module will just be a no-op\n\nfunction decorateWithMetrics(func) { return func; }\nfunction getMetrics() {}\nfunction printMetrics() {}\nfunction resetMetrics() {}\n\nexport {\n    decorateWithMetrics,\n    getMetrics,\n    resetMetrics,\n    printMetrics,\n};\n","/**\n * This file is here to wrap IDBKeyVal with a layer that provides data-changed events like the ones that exist\n * when using LocalStorage APIs in the browser. These events are great because multiple tabs can listen for when\n * data changes and then stay up-to-date with everything happening in Onyx.\n */\nimport _ from 'underscore';\nimport Storage from './providers/IDBKeyVal';\n\nconst SYNC_ONYX = 'SYNC_ONYX';\n\n/**\n * Raise an event thorough `localStorage` to let other tabs know a value changed\n * @param {String} onyxKey\n */\nfunction raiseStorageSyncEvent(onyxKey) {\n    global.localStorage.setItem(SYNC_ONYX, onyxKey);\n    global.localStorage.removeItem(SYNC_ONYX, onyxKey);\n}\n\nfunction raiseStorageSyncManyKeysEvent(onyxKeys) {\n    _.each(onyxKeys, (onyxKey) => {\n        raiseStorageSyncEvent(onyxKey);\n    });\n}\n\nconst webStorage = {\n    ...Storage,\n\n    /**\n     * @param {Function} onStorageKeyChanged Storage synchronization mechanism keeping all opened tabs in sync\n     */\n    keepInstancesSync(onStorageKeyChanged) {\n        // Override set, remove and clear to raise storage events that we intercept in other tabs\n        this.setItem = (key, value) => Storage.setItem(key, value)\n            .then(() => raiseStorageSyncEvent(key));\n\n        this.removeItem = key => Storage.removeItem(key)\n            .then(() => raiseStorageSyncEvent(key));\n\n        this.removeItems = keys => Storage.removeItems(keys)\n            .then(() => raiseStorageSyncManyKeysEvent(keys));\n\n        this.mergeItem = (key, batchedChanges, modifiedData) => Storage.mergeItem(key, batchedChanges, modifiedData)\n            .then(() => raiseStorageSyncEvent(key));\n\n        // If we just call Storage.clear other tabs will have no idea which keys were available previously\n        // so that they can call keysChanged for them. That's why we iterate over every key and raise a storage sync\n        // event for each one\n        this.clear = () => {\n            let allKeys;\n\n            // They keys must be retreived before storage is cleared or else the list of keys would be empty\n            return Storage.getAllKeys()\n                .then((keys) => {\n                    allKeys = keys;\n                })\n                .then(() => Storage.clear())\n                .then(() => {\n                    // Now that storage is cleared, the storage sync event can happen which is a more atomic action\n                    // for other browser tabs\n                    _.each(allKeys, raiseStorageSyncEvent);\n                });\n        };\n\n        // This listener will only be triggered by events coming from other tabs\n        global.addEventListener('storage', (event) => {\n            // Ignore events that don't originate from the SYNC_ONYX logic\n            if (event.key !== SYNC_ONYX || !event.newValue) {\n                return;\n            }\n\n            const onyxKey = event.newValue;\n            Storage.getItem(onyxKey)\n                .then(value => onStorageKeyChanged(onyxKey, value));\n        });\n    },\n};\n\nexport default webStorage;\n","import WebStorage from './WebStorage';\n\nexport default WebStorage;\n","import {\n    set,\n    keys,\n    getMany,\n    setMany,\n    get,\n    clear,\n    del,\n    delMany,\n    createStore,\n    promisifyRequest,\n} from 'idb-keyval';\nimport _ from 'underscore';\nimport utils from '../../utils';\n\n// We don't want to initialize the store while the JS bundle loads as idb-keyval will try to use global.indexedDB\n// which might not be available in certain environments that load the bundle (e.g. electron main process).\nlet customStoreInstance;\nconst getCustomStore = () => {\n    if (!customStoreInstance) {\n        customStoreInstance = createStore('OnyxDB', 'keyvaluepairs');\n    }\n    return customStoreInstance;\n};\n\nconst provider = {\n    /**\n     * Sets the value for a given key. The only requirement is that the value should be serializable to JSON string\n     * @param {String} key\n     * @param {*} value\n     * @return {Promise<void>}\n     */\n    setItem: (key, value) => set(key, value, getCustomStore()),\n\n    /**\n     * Get multiple key-value pairs for the give array of keys in a batch.\n     * This is optimized to use only one database transaction.\n     * @param {String[]} keysParam\n     * @return {Promise<Array<[key, value]>>}\n     */\n    multiGet: keysParam => getMany(keysParam, getCustomStore())\n        .then(values => _.map(values, (value, index) => [keysParam[index], value])),\n\n    /**\n     * Multiple merging of existing and new values in a batch\n     * @param {Array<[key, value]>} pairs\n     * This function also removes all nested null values from an object.\n     * @return {Promise<void>}\n     */\n    multiMerge: pairs => getCustomStore()('readwrite', (store) => {\n        // Note: we are using the manual store transaction here, to fit the read and update\n        // of the items in one transaction to achieve best performance.\n\n        const getValues = Promise.all(_.map(pairs, ([key]) => promisifyRequest(store.get(key))));\n\n        return getValues.then((values) => {\n            const upsertMany = _.map(pairs, ([key, value], index) => {\n                const prev = values[index];\n                const newValue = utils.fastMerge(prev, value);\n                return promisifyRequest(store.put(newValue, key));\n            });\n            return Promise.all(upsertMany);\n        });\n    }),\n\n    /**\n     * Merging an existing value with a new one\n     * @param {String} key\n     * @param {any} _changes - not used, as we rely on the pre-merged data from the `modifiedData`\n     * @param {any} modifiedData - the pre-merged data from `Onyx.applyMerge`\n     * @return {Promise<void>}\n     */\n    mergeItem(key, _changes, modifiedData) {\n        // Since Onyx also merged the existing value with the changes, we can just set the value directly\n        return provider.setItem(key, modifiedData);\n    },\n\n    /**\n     * Stores multiple key-value pairs in a batch\n     * @param {Array<[key, value]>} pairs\n     * @return {Promise<void>}\n     */\n    multiSet: pairs => setMany(pairs, getCustomStore()),\n\n    /**\n     * Clear everything from storage and also stops the SyncQueue from adding anything more to storage\n     * @returns {Promise<void>}\n     */\n    clear: () => clear(getCustomStore()),\n\n    // This is a noop for now in order to keep clients from crashing see https://github.com/Expensify/Expensify/issues/312438\n    setMemoryOnlyKeys: () => {},\n\n    /**\n     * Returns all keys available in storage\n     * @returns {Promise<String[]>}\n     */\n    getAllKeys: () => keys(getCustomStore()),\n\n    /**\n     * Get the value of a given key or return `null` if it's not available in storage\n     * @param {String} key\n     * @return {Promise<*>}\n     */\n    getItem: key => get(key, getCustomStore()),\n\n    /**\n     * Remove given key and it's value from storage\n     * @param {String} key\n     * @returns {Promise<void>}\n     */\n    removeItem: key => del(key, getCustomStore()),\n\n    /**\n     * Remove given keys and their values from storage\n     *\n     * @param {Array} keysParam\n     * @returns {Promise}\n     */\n    removeItems: keysParam => delMany(keysParam, getCustomStore()),\n\n    /**\n     * Gets the total bytes of the database file\n     * @returns {Promise<number>}\n     */\n    getDatabaseSize() {\n        if (!window.navigator || !window.navigator.storage) {\n            throw new Error('StorageManager browser API unavailable');\n        }\n\n        return window.navigator.storage.estimate()\n            .then(value => ({\n                bytesUsed: value.usage,\n                bytesRemaining: value.quota - value.usage,\n            }))\n            .catch((error) => {\n                throw new Error(`Unable to estimate web storage quota. Original error: ${error}`);\n            });\n    },\n};\n\nexport default provider;\n","import _ from 'underscore';\n\nfunction areObjectsEmpty(a, b) {\n    return (\n        typeof a === 'object'\n        && typeof b === 'object'\n        && _.isEmpty(a)\n        && _.isEmpty(b)\n    );\n}\n\n// Mostly copied from https://medium.com/@lubaka.a/how-to-remove-lodash-performance-improvement-b306669ad0e1\n\n/**\n * @param {mixed} val\n * @returns {boolean}\n*/\nfunction isMergeableObject(val) {\n    const nonNullObject = val != null ? typeof val === 'object' : false;\n    return (nonNullObject\n        && Object.prototype.toString.call(val) !== '[object RegExp]'\n        && Object.prototype.toString.call(val) !== '[object Date]')\n        // eslint-disable-next-line rulesdir/prefer-underscore-method\n        && !Array.isArray(val);\n}\n\n/**\n* @param {Object} target\n* @param {Object} source\n* @param {Boolean} shouldRemoveNullObjectValues\n* @returns {Object}\n*/\nfunction mergeObject(target, source, shouldRemoveNullObjectValues = true) {\n    const destination = {};\n    if (isMergeableObject(target)) {\n        // lodash adds a small overhead so we don't use it here\n        // eslint-disable-next-line rulesdir/prefer-underscore-method\n        const targetKeys = Object.keys(target);\n        for (let i = 0; i < targetKeys.length; ++i) {\n            const key = targetKeys[i];\n\n            // If shouldRemoveNullObjectValues is true, we want to remove null values from the merged object\n            const isSourceOrTargetNull = target[key] === null || source[key] === null;\n            const shouldOmitSourceKey = shouldRemoveNullObjectValues && isSourceOrTargetNull;\n\n            if (!shouldOmitSourceKey) {\n                destination[key] = target[key];\n            }\n        }\n    }\n\n    // lodash adds a small overhead so we don't use it here\n    // eslint-disable-next-line rulesdir/prefer-underscore-method\n    const sourceKeys = Object.keys(source);\n    for (let i = 0; i < sourceKeys.length; ++i) {\n        const key = sourceKeys[i];\n\n        // If shouldRemoveNullObjectValues is true, we want to remove null values from the merged object\n        const shouldOmitSourceKey = shouldRemoveNullObjectValues && source[key] === null;\n\n        // If we pass undefined as the updated value for a key, we want to generally ignore it\n        const isSourceKeyUndefined = source[key] === undefined;\n\n        if (!isSourceKeyUndefined && !shouldOmitSourceKey) {\n            const isSourceKeyMergable = isMergeableObject(source[key]);\n\n            if (isSourceKeyMergable && target[key]) {\n                if ((!shouldRemoveNullObjectValues || isSourceKeyMergable)) {\n                    // eslint-disable-next-line no-use-before-define\n                    destination[key] = fastMerge(target[key], source[key], shouldRemoveNullObjectValues);\n                }\n            } else if (!shouldRemoveNullObjectValues || source[key] !== null) {\n                destination[key] = source[key];\n            }\n        }\n    }\n\n    return destination;\n}\n\n/**\n * Merges two objects and removes null values if \"shouldRemoveNullObjectValues\" is set to true\n *\n * We generally want to remove null values from objects written to disk and cache, because it decreases the amount of data stored in memory and on disk.\n * On native, when merging an existing value with new changes, SQLite will use JSON_PATCH, which removes top-level nullish values.\n * To be consistent with the behaviour for merge, we'll also want to remove null values for \"set\" operations.\n *\n* @param {Object|Array} target\n* @param {Object|Array} source\n* @param {Boolean} shouldRemoveNullObjectValues\n* @returns {Object|Array}\n*/\nfunction fastMerge(target, source, shouldRemoveNullObjectValues = true) {\n    // We have to ignore arrays and nullish values here,\n    // otherwise \"mergeObject\" will throw an error,\n    // because it expects an object as \"source\"\n    if (_.isArray(source) || source === null || source === undefined) {\n        return source;\n    }\n    return mergeObject(target, source, shouldRemoveNullObjectValues);\n}\n\nfunction removeNestedNullValues(value) {\n    if (typeof value === 'object' && !_.isArray(value)) {\n        return fastMerge(value, value);\n    }\n\n    return value;\n}\n\nexport default {areObjectsEmpty, fastMerge, removeNestedNullValues};\n","/**\n * This is a higher order component that provides the ability to map a state property directly to\n * something in Onyx (a key/value store). That way, as soon as data in Onyx changes, the state will be set and the view\n * will automatically change to reflect the new data.\n */\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport _ from 'underscore';\nimport Onyx from './Onyx';\nimport * as Str from './Str';\nimport utils from './utils';\n\n/**\n * Returns the display name of a component\n *\n * @param {object} component\n * @returns {string}\n */\nfunction getDisplayName(component) {\n    return component.displayName || component.name || 'Component';\n}\n\n/**\n * Removes all the keys from state that are unrelated to the onyx data being mapped to the component.\n *\n * @param {Object} state of the component\n * @param {Object} onyxToStateMapping the object holding all of the mapping configuration for the component\n * @returns {Object}\n */\nconst getOnyxDataFromState = (state, onyxToStateMapping) => _.pick(state, _.keys(onyxToStateMapping));\n\nexport default function (mapOnyxToState, shouldDelayUpdates = false) {\n    // A list of keys that must be present in tempState before we can render the WrappedComponent\n    const requiredKeysForInit = _.chain(mapOnyxToState)\n        .omit(config => config.initWithStoredValues === false)\n        .keys()\n        .value();\n    return (WrappedComponent) => {\n        const displayName = getDisplayName(WrappedComponent);\n        class withOnyx extends React.Component {\n            pendingSetStates = [];\n\n            constructor(props) {\n                super(props);\n                this.shouldDelayUpdates = shouldDelayUpdates;\n                this.setWithOnyxState = this.setWithOnyxState.bind(this);\n                this.flushPendingSetStates = this.flushPendingSetStates.bind(this);\n\n                // This stores all the Onyx connection IDs to be used when the component unmounts so everything can be\n                // disconnected. It is a key value store with the format {[mapping.key]: connectionID}.\n                this.activeConnectionIDs = {};\n\n                const cachedState = _.reduce(\n                    mapOnyxToState,\n                    (resultObj, mapping, propertyName) => {\n                        const key = Str.result(mapping.key, props);\n                        let value = Onyx.tryGetCachedValue(key, mapping);\n                        if (!value && mapping.initialValue) {\n                            value = mapping.initialValue;\n                        }\n\n                        /**\n                         * If we have a pending merge for a key it could mean that data is being set via Onyx.merge() and someone expects a component to have this data immediately.\n                         *\n                         * @example\n                         *\n                         * Onyx.merge('report_123', value);\n                         * Navigation.navigate(route); // Where \"route\" expects the \"value\" to be available immediately once rendered.\n                         *\n                         * In reality, Onyx.merge() will only update the subscriber after all merges have been batched and the previous value is retrieved via a get() (returns a promise).\n                         * So, we won't use the cache optimization here as it will lead us to arbitrarily defer various actions in the application code.\n                         */\n                        if (\n                            (value !== undefined\n                                && !Onyx.hasPendingMergeForKey(key))\n                            || mapping.allowStaleData\n                        ) {\n                            // eslint-disable-next-line no-param-reassign\n                            resultObj[propertyName] = value;\n                        }\n\n                        return resultObj;\n                    },\n                    {},\n                );\n\n                // If we have all the data we need, then we can render the component immediately\n                cachedState.loading = _.size(cachedState) < requiredKeysForInit.length;\n\n                // Object holding the temporary initial state for the component while we load the various Onyx keys\n                this.tempState = cachedState;\n\n                this.state = cachedState;\n            }\n\n            componentDidMount() {\n                // Subscribe each of the state properties to the proper Onyx key\n                _.each(mapOnyxToState, (mapping, propertyName) => {\n                    this.connectMappingToOnyx(mapping, propertyName);\n                });\n                this.checkEvictableKeys();\n            }\n\n            componentDidUpdate() {\n                // When the state is passed to the key functions with Str.result(), omit anything\n                // from state that was not part of the mapped keys.\n                const onyxDataFromState = getOnyxDataFromState(this.state, mapOnyxToState);\n\n                // If any of the mappings use data from the props, then when the props change, all the\n                // connections need to be reconnected with the new props\n                _.each(mapOnyxToState, (mapping, propName) => {\n                    const previousKey = mapping.previousKey;\n                    const newKey = Str.result(mapping.key, {...this.props, ...onyxDataFromState});\n                    if (previousKey !== newKey) {\n                        Onyx.disconnect(this.activeConnectionIDs[previousKey], previousKey);\n                        delete this.activeConnectionIDs[previousKey];\n                        this.connectMappingToOnyx(mapping, propName);\n                    }\n                });\n                this.checkEvictableKeys();\n            }\n\n            componentWillUnmount() {\n                // Disconnect everything from Onyx\n                _.each(mapOnyxToState, (mapping) => {\n                    const key = Str.result(mapping.key, {...this.props, ...getOnyxDataFromState(this.state, mapOnyxToState)});\n                    Onyx.disconnect(this.activeConnectionIDs[key], key);\n                });\n            }\n\n            setStateProxy(modifier) {\n                if (this.shouldDelayUpdates) {\n                    this.pendingSetStates.push(modifier);\n                } else {\n                    this.setState(modifier);\n                }\n            }\n\n            /**\n             * This method is used by the internal raw Onyx `sendDataToConnection`, it is designed to prevent unnecessary renders while a component\n             * still in a \"loading\" (read \"mounting\") state. The temporary initial state is saved to the HOC instance and setState()\n             * only called once all the necessary data has been collected.\n             *\n             * There is however the possibility the component could have been updated by a call to setState()\n             * before the data was \"initially\" collected. A race condition.\n             * For example some update happened on some key, while onyx was still gathering the initial hydration data.\n             * This update is disptached directly to setStateProxy and therefore the component has the most up-to-date data\n             *\n             * This is a design flaw in Onyx itself as dispatching updates before initial hydration is not a correct event flow.\n             * We however need to workaround this issue in the HOC. The addition of initialValue makes things even more complex,\n             * since you cannot be really sure if the component has been updated before or after the initial hydration. Therefore if\n             * initialValue is there, we just check if the update is different than that and then try to handle it as best as we can.\n             *\n             * @param {String} statePropertyName\n             * @param {*} val\n             */\n            setWithOnyxState(statePropertyName, val) {\n                const prevValue = this.state[statePropertyName];\n\n                // If the component is not loading (read \"mounting\"), then we can just update the state\n                // There is a small race condition.\n                // When calling setWithOnyxState we delete the tempState object that is used to hold temporary state updates while the HOC is gathering data.\n                // However the loading flag is only set on the setState callback down below. setState however is an async operation that is also batched,\n                // therefore there is a small window of time where the loading flag is not false but the tempState is already gone\n                // (while the update is queued and waiting to be applied).\n                // This simply bypasses the loading check if the tempState is gone and the update can be safely queued with a normal setStateProxy.\n                if (!this.state.loading || !this.tempState) {\n                    // Performance optimization, do not trigger update with same values\n                    if (prevValue === val || utils.areObjectsEmpty(prevValue, val)) {\n                        return;\n                    }\n\n                    this.setStateProxy({[statePropertyName]: val});\n                    return;\n                }\n\n                this.tempState[statePropertyName] = val;\n\n                // If some key does not have a value yet, do not update the state yet\n                const tempStateIsMissingKey = _.some(requiredKeysForInit, key => _.isUndefined(this.tempState[key]));\n                if (tempStateIsMissingKey) {\n                    return;\n                }\n\n                const stateUpdate = {...this.tempState};\n                delete this.tempState;\n\n                // Full of hacky workarounds to prevent the race condition described above.\n                this.setState((prevState) => {\n                    const finalState = _.reduce(stateUpdate, (result, value, key) => {\n                        if (key === 'loading') {\n                            return result;\n                        }\n\n                        const initialValue = mapOnyxToState[key].initialValue;\n\n                        // If initialValue is there and the state contains something different it means\n                        // an update has already been received and we can discard the value we are trying to hydrate\n                        if (!_.isUndefined(initialValue) && !_.isUndefined(prevState[key]) && prevState[key] !== initialValue) {\n                            // eslint-disable-next-line no-param-reassign\n                            result[key] = prevState[key];\n\n                            // if value is already there (without initial value) then we can discard the value we are trying to hydrate\n                        } else if (!_.isUndefined(prevState[key])) {\n                            // eslint-disable-next-line no-param-reassign\n                            result[key] = prevState[key];\n                        } else {\n                            // eslint-disable-next-line no-param-reassign\n                            result[key] = value;\n                        }\n                        return result;\n                    }, {});\n\n                    finalState.loading = false;\n                    return finalState;\n                });\n            }\n\n            /**\n             * Makes sure each Onyx key we requested has been set to state with a value of some kind.\n             * We are doing this so that the wrapped component will only render when all the data\n             * it needs is available to it.\n             */\n            checkEvictableKeys() {\n                // We will add this key to our list of recently accessed keys\n                // if the canEvict function returns true. This is necessary criteria\n                // we MUST use to specify if a key can be removed or not.\n                _.each(mapOnyxToState, (mapping) => {\n                    if (_.isUndefined(mapping.canEvict)) {\n                        return;\n                    }\n\n                    const canEvict = Str.result(mapping.canEvict, this.props);\n                    const key = Str.result(mapping.key, this.props);\n\n                    if (!Onyx.isSafeEvictionKey(key)) {\n                        throw new Error(`canEvict can't be used on key '${key}'. This key must explicitly be flagged as safe for removal by adding it to Onyx.init({safeEvictionKeys: []}).`);\n                    }\n\n                    if (canEvict) {\n                        Onyx.removeFromEvictionBlockList(key, mapping.connectionID);\n                    } else {\n                        Onyx.addToEvictionBlockList(key, mapping.connectionID);\n                    }\n                });\n            }\n\n            /**\n             * Takes a single mapping and binds the state of the component to the store\n             *\n             * @param {object} mapping\n             * @param {string|function} mapping.key key to connect to. can be a string or a\n             * function that takes this.props as an argument and returns a string\n             * @param {string} statePropertyName the name of the state property that Onyx will add the data to\n             * @param {boolean} [mapping.initWithStoredValues] If set to false, then no data will be prefilled into the\n             *  component\n             */\n            connectMappingToOnyx(mapping, statePropertyName) {\n                const key = Str.result(mapping.key, {...this.props, ...getOnyxDataFromState(this.state, mapOnyxToState)});\n\n                // Remember the previous key so that if it ever changes, the component will reconnect to Onyx\n                // in componentDidUpdate\n                if (statePropertyName !== 'initialValue' && mapOnyxToState[statePropertyName]) {\n                    // eslint-disable-next-line no-param-reassign\n                    mapOnyxToState[statePropertyName].previousKey = key;\n                }\n\n                // eslint-disable-next-line rulesdir/prefer-onyx-connect-in-libs\n                this.activeConnectionIDs[key] = Onyx.connect({\n                    ...mapping,\n                    key,\n                    statePropertyName,\n                    withOnyxInstance: this,\n                    displayName,\n                });\n            }\n\n            flushPendingSetStates() {\n                if (!this.shouldDelayUpdates) {\n                    return;\n                }\n\n                this.shouldDelayUpdates = false;\n\n                this.pendingSetStates.forEach((modifier) => {\n                    this.setState(modifier);\n                });\n                this.pendingSetStates = [];\n            }\n\n            render() {\n                // Remove any null values so that React replaces them with default props\n                const propsToPass = _.omit(this.props, _.isNull);\n\n                if (this.state.loading) {\n                    return null;\n                }\n\n                // Remove any internal state properties used by withOnyx\n                // that should not be passed to a wrapped component\n                let stateToPass = _.omit(this.state, 'loading');\n                stateToPass = _.omit(stateToPass, _.isNull);\n\n                // Spreading props and state is necessary in an HOC where the data cannot be predicted\n                return (\n                    <WrappedComponent\n                        markReadyForHydration={this.flushPendingSetStates}\n                        // eslint-disable-next-line react/jsx-props-no-spreading\n                        {...propsToPass}\n                        // eslint-disable-next-line react/jsx-props-no-spreading\n                        {...stateToPass}\n                        ref={this.props.forwardedRef}\n                    />\n                );\n            }\n        }\n\n        withOnyx.propTypes = {\n            forwardedRef: PropTypes.oneOfType([\n                PropTypes.func,\n                // eslint-disable-next-line react/forbid-prop-types\n                PropTypes.shape({current: PropTypes.object}),\n            ]),\n        };\n        withOnyx.defaultProps = {\n            forwardedRef: undefined,\n        };\n        withOnyx.displayName = `withOnyx(${displayName})`;\n        return React.forwardRef((props, ref) => {\n            const Component = withOnyx;\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            return <Component {...props} forwardedRef={ref} />;\n        });\n    };\n}\n","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar printWarning = function() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n  var loggedTypeFailures = {};\n  var has = Function.call.bind(Object.prototype.hasOwnProperty);\n\n  printWarning = function(text) {\n    var message = 'Warning: ' + text;\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error(\n              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +\n              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          printWarning(\n            (componentName || 'React class') + ': type specification of ' +\n            location + ' `' + typeSpecName + '` is invalid; the type checker ' +\n            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +\n            'You may have forgotten to pass an argument to the type checker ' +\n            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n            'shape all require an argument).'\n          );\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n\n          var stack = getStack ? getStack() : '';\n\n          printWarning(\n            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')\n          );\n        }\n      }\n    }\n  }\n}\n\n/**\n * Resets warning cache when testing.\n *\n * @private\n */\ncheckPropTypes.resetWarningCache = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    loggedTypeFailures = {};\n  }\n}\n\nmodule.exports = checkPropTypes;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactIs = require('react-is');\nvar assign = require('object-assign');\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\nvar checkPropTypes = require('./checkPropTypes');\n\nvar has = Function.call.bind(Object.prototype.hasOwnProperty);\nvar printWarning = function() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  printWarning = function(text) {\n    var message = 'Warning: ' + text;\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\nfunction emptyFunctionThatReturnsNull() {\n  return null;\n}\n\nmodule.exports = function(isValidElement, throwOnDirectAccess) {\n  /* global Symbol */\n  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n  /**\n   * Returns the iterator method function contained on the iterable object.\n   *\n   * Be sure to invoke the function with the iterable as context:\n   *\n   *     var iteratorFn = getIteratorFn(myIterable);\n   *     if (iteratorFn) {\n   *       var iterator = iteratorFn.call(myIterable);\n   *       ...\n   *     }\n   *\n   * @param {?object} maybeIterable\n   * @return {?function}\n   */\n  function getIteratorFn(maybeIterable) {\n    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  /**\n   * Collection of methods that allow declaration and validation of props that are\n   * supplied to React components. Example usage:\n   *\n   *   var Props = require('ReactPropTypes');\n   *   var MyArticle = React.createClass({\n   *     propTypes: {\n   *       // An optional string prop named \"description\".\n   *       description: Props.string,\n   *\n   *       // A required enum prop named \"category\".\n   *       category: Props.oneOf(['News','Photos']).isRequired,\n   *\n   *       // A prop named \"dialog\" that requires an instance of Dialog.\n   *       dialog: Props.instanceOf(Dialog).isRequired\n   *     },\n   *     render: function() { ... }\n   *   });\n   *\n   * A more formal specification of how these methods are used:\n   *\n   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n   *   decl := ReactPropTypes.{type}(.isRequired)?\n   *\n   * Each and every declaration produces a function with the same signature. This\n   * allows the creation of custom validation functions. For example:\n   *\n   *  var MyLink = React.createClass({\n   *    propTypes: {\n   *      // An optional string or URI prop named \"href\".\n   *      href: function(props, propName, componentName) {\n   *        var propValue = props[propName];\n   *        if (propValue != null && typeof propValue !== 'string' &&\n   *            !(propValue instanceof URI)) {\n   *          return new Error(\n   *            'Expected a string or an URI for ' + propName + ' in ' +\n   *            componentName\n   *          );\n   *        }\n   *      }\n   *    },\n   *    render: function() {...}\n   *  });\n   *\n   * @internal\n   */\n\n  var ANONYMOUS = '<<anonymous>>';\n\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n  var ReactPropTypes = {\n    array: createPrimitiveTypeChecker('array'),\n    bool: createPrimitiveTypeChecker('boolean'),\n    func: createPrimitiveTypeChecker('function'),\n    number: createPrimitiveTypeChecker('number'),\n    object: createPrimitiveTypeChecker('object'),\n    string: createPrimitiveTypeChecker('string'),\n    symbol: createPrimitiveTypeChecker('symbol'),\n\n    any: createAnyTypeChecker(),\n    arrayOf: createArrayOfTypeChecker,\n    element: createElementTypeChecker(),\n    elementType: createElementTypeTypeChecker(),\n    instanceOf: createInstanceTypeChecker,\n    node: createNodeChecker(),\n    objectOf: createObjectOfTypeChecker,\n    oneOf: createEnumTypeChecker,\n    oneOfType: createUnionTypeChecker,\n    shape: createShapeTypeChecker,\n    exact: createStrictShapeTypeChecker,\n  };\n\n  /**\n   * inlined Object.is polyfill to avoid requiring consumers ship their own\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n   */\n  /*eslint-disable no-self-compare*/\n  function is(x, y) {\n    // SameValue algorithm\n    if (x === y) {\n      // Steps 1-5, 7-10\n      // Steps 6.b-6.e: +0 != -0\n      return x !== 0 || 1 / x === 1 / y;\n    } else {\n      // Step 6.a: NaN == NaN\n      return x !== x && y !== y;\n    }\n  }\n  /*eslint-enable no-self-compare*/\n\n  /**\n   * We use an Error-like object for backward compatibility as people may call\n   * PropTypes directly and inspect their output. However, we don't use real\n   * Errors anymore. We don't inspect their stack anyway, and creating them\n   * is prohibitively expensive if they are created too often, such as what\n   * happens in oneOfType() for any type before the one that matched.\n   */\n  function PropTypeError(message) {\n    this.message = message;\n    this.stack = '';\n  }\n  // Make `instanceof Error` still work for returned errors.\n  PropTypeError.prototype = Error.prototype;\n\n  function createChainableTypeChecker(validate) {\n    if (process.env.NODE_ENV !== 'production') {\n      var manualPropTypeCallCache = {};\n      var manualPropTypeWarningCount = 0;\n    }\n    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n      componentName = componentName || ANONYMOUS;\n      propFullName = propFullName || propName;\n\n      if (secret !== ReactPropTypesSecret) {\n        if (throwOnDirectAccess) {\n          // New behavior only for users of `prop-types` package\n          var err = new Error(\n            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n            'Use `PropTypes.checkPropTypes()` to call them. ' +\n            'Read more at http://fb.me/use-check-prop-types'\n          );\n          err.name = 'Invariant Violation';\n          throw err;\n        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {\n          // Old behavior for people using React.PropTypes\n          var cacheKey = componentName + ':' + propName;\n          if (\n            !manualPropTypeCallCache[cacheKey] &&\n            // Avoid spamming the console because they are often not actionable except for lib authors\n            manualPropTypeWarningCount < 3\n          ) {\n            printWarning(\n              'You are manually calling a React.PropTypes validation ' +\n              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +\n              'and will throw in the standalone `prop-types` package. ' +\n              'You may be seeing this warning due to a third-party PropTypes ' +\n              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'\n            );\n            manualPropTypeCallCache[cacheKey] = true;\n            manualPropTypeWarningCount++;\n          }\n        }\n      }\n      if (props[propName] == null) {\n        if (isRequired) {\n          if (props[propName] === null) {\n            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n          }\n          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n        }\n        return null;\n      } else {\n        return validate(props, propName, componentName, location, propFullName);\n      }\n    }\n\n    var chainedCheckType = checkType.bind(null, false);\n    chainedCheckType.isRequired = checkType.bind(null, true);\n\n    return chainedCheckType;\n  }\n\n  function createPrimitiveTypeChecker(expectedType) {\n    function validate(props, propName, componentName, location, propFullName, secret) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== expectedType) {\n        // `propValue` being instance of, say, date/regexp, pass the 'object'\n        // check, but we can offer a more precise error message here rather than\n        // 'of type `object`'.\n        var preciseType = getPreciseType(propValue);\n\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createAnyTypeChecker() {\n    return createChainableTypeChecker(emptyFunctionThatReturnsNull);\n  }\n\n  function createArrayOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n      }\n      var propValue = props[propName];\n      if (!Array.isArray(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n      }\n      for (var i = 0; i < propValue.length; i++) {\n        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);\n        if (error instanceof Error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createElementTypeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      if (!isValidElement(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createElementTypeTypeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      if (!ReactIs.isValidElementType(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createInstanceTypeChecker(expectedClass) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!(props[propName] instanceof expectedClass)) {\n        var expectedClassName = expectedClass.name || ANONYMOUS;\n        var actualClassName = getClassName(props[propName]);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createEnumTypeChecker(expectedValues) {\n    if (!Array.isArray(expectedValues)) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (arguments.length > 1) {\n          printWarning(\n            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +\n            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'\n          );\n        } else {\n          printWarning('Invalid argument supplied to oneOf, expected an array.');\n        }\n      }\n      return emptyFunctionThatReturnsNull;\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      for (var i = 0; i < expectedValues.length; i++) {\n        if (is(propValue, expectedValues[i])) {\n          return null;\n        }\n      }\n\n      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {\n        var type = getPreciseType(value);\n        if (type === 'symbol') {\n          return String(value);\n        }\n        return value;\n      });\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createObjectOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n      }\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n      }\n      for (var key in propValue) {\n        if (has(propValue, key)) {\n          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n          if (error instanceof Error) {\n            return error;\n          }\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createUnionTypeChecker(arrayOfTypeCheckers) {\n    if (!Array.isArray(arrayOfTypeCheckers)) {\n      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;\n      return emptyFunctionThatReturnsNull;\n    }\n\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n      var checker = arrayOfTypeCheckers[i];\n      if (typeof checker !== 'function') {\n        printWarning(\n          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +\n          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'\n        );\n        return emptyFunctionThatReturnsNull;\n      }\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n        var checker = arrayOfTypeCheckers[i];\n        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {\n          return null;\n        }\n      }\n\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createNodeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!isNode(props[propName])) {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      for (var key in shapeTypes) {\n        var checker = shapeTypes[key];\n        if (!checker) {\n          continue;\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createStrictShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      // We need to check all keys in case some are required but missing from\n      // props.\n      var allKeys = assign({}, props[propName], shapeTypes);\n      for (var key in allKeys) {\n        var checker = shapeTypes[key];\n        if (!checker) {\n          return new PropTypeError(\n            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +\n            '\\nBad object: ' + JSON.stringify(props[propName], null, '  ') +\n            '\\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')\n          );\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function isNode(propValue) {\n    switch (typeof propValue) {\n      case 'number':\n      case 'string':\n      case 'undefined':\n        return true;\n      case 'boolean':\n        return !propValue;\n      case 'object':\n        if (Array.isArray(propValue)) {\n          return propValue.every(isNode);\n        }\n        if (propValue === null || isValidElement(propValue)) {\n          return true;\n        }\n\n        var iteratorFn = getIteratorFn(propValue);\n        if (iteratorFn) {\n          var iterator = iteratorFn.call(propValue);\n          var step;\n          if (iteratorFn !== propValue.entries) {\n            while (!(step = iterator.next()).done) {\n              if (!isNode(step.value)) {\n                return false;\n              }\n            }\n          } else {\n            // Iterator will provide entry [k,v] tuples rather than values.\n            while (!(step = iterator.next()).done) {\n              var entry = step.value;\n              if (entry) {\n                if (!isNode(entry[1])) {\n                  return false;\n                }\n              }\n            }\n          }\n        } else {\n          return false;\n        }\n\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  function isSymbol(propType, propValue) {\n    // Native Symbol.\n    if (propType === 'symbol') {\n      return true;\n    }\n\n    // falsy value can't be a Symbol\n    if (!propValue) {\n      return false;\n    }\n\n    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n    if (propValue['@@toStringTag'] === 'Symbol') {\n      return true;\n    }\n\n    // Fallback for non-spec compliant Symbols which are polyfilled.\n    if (typeof Symbol === 'function' && propValue instanceof Symbol) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // Equivalent of `typeof` but with special handling for array and regexp.\n  function getPropType(propValue) {\n    var propType = typeof propValue;\n    if (Array.isArray(propValue)) {\n      return 'array';\n    }\n    if (propValue instanceof RegExp) {\n      // Old webkits (at least until Android 4.0) return 'function' rather than\n      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n      // passes PropTypes.object.\n      return 'object';\n    }\n    if (isSymbol(propType, propValue)) {\n      return 'symbol';\n    }\n    return propType;\n  }\n\n  // This handles more types than `getPropType`. Only used for error messages.\n  // See `createPrimitiveTypeChecker`.\n  function getPreciseType(propValue) {\n    if (typeof propValue === 'undefined' || propValue === null) {\n      return '' + propValue;\n    }\n    var propType = getPropType(propValue);\n    if (propType === 'object') {\n      if (propValue instanceof Date) {\n        return 'date';\n      } else if (propValue instanceof RegExp) {\n        return 'regexp';\n      }\n    }\n    return propType;\n  }\n\n  // Returns a string that is postfixed to a warning about an invalid type.\n  // For example, \"undefined\" or \"of type array\"\n  function getPostfixForTypeWarning(value) {\n    var type = getPreciseType(value);\n    switch (type) {\n      case 'array':\n      case 'object':\n        return 'an ' + type;\n      case 'boolean':\n      case 'date':\n      case 'regexp':\n        return 'a ' + type;\n      default:\n        return type;\n    }\n  }\n\n  // Returns class name of the object, if any.\n  function getClassName(propValue) {\n    if (!propValue.constructor || !propValue.constructor.name) {\n      return ANONYMOUS;\n    }\n    return propValue.constructor.name;\n  }\n\n  ReactPropTypes.checkPropTypes = checkPropTypes;\n  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","/** @license React v16.13.1\n * react-is.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar hasSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;\nvar REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;\nvar REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;\nvar REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;\nvar REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;\nvar REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;\nvar REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary\n// (unstable) APIs that have been removed. Can we remove the symbols?\n\nvar REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;\nvar REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;\nvar REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\nvar REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;\nvar REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;\nvar REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;\nvar REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;\nvar REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;\nvar REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;\nvar REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;\nvar REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;\n\nfunction isValidElementType(type) {\n  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);\n}\n\nfunction typeOf(object) {\n  if (typeof object === 'object' && object !== null) {\n    var $$typeof = object.$$typeof;\n\n    switch ($$typeof) {\n      case REACT_ELEMENT_TYPE:\n        var type = object.type;\n\n        switch (type) {\n          case REACT_ASYNC_MODE_TYPE:\n          case REACT_CONCURRENT_MODE_TYPE:\n          case REACT_FRAGMENT_TYPE:\n          case REACT_PROFILER_TYPE:\n          case REACT_STRICT_MODE_TYPE:\n          case REACT_SUSPENSE_TYPE:\n            return type;\n\n          default:\n            var $$typeofType = type && type.$$typeof;\n\n            switch ($$typeofType) {\n              case REACT_CONTEXT_TYPE:\n              case REACT_FORWARD_REF_TYPE:\n              case REACT_LAZY_TYPE:\n              case REACT_MEMO_TYPE:\n              case REACT_PROVIDER_TYPE:\n                return $$typeofType;\n\n              default:\n                return $$typeof;\n            }\n\n        }\n\n      case REACT_PORTAL_TYPE:\n        return $$typeof;\n    }\n  }\n\n  return undefined;\n} // AsyncMode is deprecated along with isAsyncMode\n\nvar AsyncMode = REACT_ASYNC_MODE_TYPE;\nvar ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;\nvar ContextConsumer = REACT_CONTEXT_TYPE;\nvar ContextProvider = REACT_PROVIDER_TYPE;\nvar Element = REACT_ELEMENT_TYPE;\nvar ForwardRef = REACT_FORWARD_REF_TYPE;\nvar Fragment = REACT_FRAGMENT_TYPE;\nvar Lazy = REACT_LAZY_TYPE;\nvar Memo = REACT_MEMO_TYPE;\nvar Portal = REACT_PORTAL_TYPE;\nvar Profiler = REACT_PROFILER_TYPE;\nvar StrictMode = REACT_STRICT_MODE_TYPE;\nvar Suspense = REACT_SUSPENSE_TYPE;\nvar hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated\n\nfunction isAsyncMode(object) {\n  {\n    if (!hasWarnedAboutDeprecatedIsAsyncMode) {\n      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint\n\n      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');\n    }\n  }\n\n  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;\n}\nfunction isConcurrentMode(object) {\n  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;\n}\nfunction isContextConsumer(object) {\n  return typeOf(object) === REACT_CONTEXT_TYPE;\n}\nfunction isContextProvider(object) {\n  return typeOf(object) === REACT_PROVIDER_TYPE;\n}\nfunction isElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\nfunction isForwardRef(object) {\n  return typeOf(object) === REACT_FORWARD_REF_TYPE;\n}\nfunction isFragment(object) {\n  return typeOf(object) === REACT_FRAGMENT_TYPE;\n}\nfunction isLazy(object) {\n  return typeOf(object) === REACT_LAZY_TYPE;\n}\nfunction isMemo(object) {\n  return typeOf(object) === REACT_MEMO_TYPE;\n}\nfunction isPortal(object) {\n  return typeOf(object) === REACT_PORTAL_TYPE;\n}\nfunction isProfiler(object) {\n  return typeOf(object) === REACT_PROFILER_TYPE;\n}\nfunction isStrictMode(object) {\n  return typeOf(object) === REACT_STRICT_MODE_TYPE;\n}\nfunction isSuspense(object) {\n  return typeOf(object) === REACT_SUSPENSE_TYPE;\n}\n\nexports.AsyncMode = AsyncMode;\nexports.ConcurrentMode = ConcurrentMode;\nexports.ContextConsumer = ContextConsumer;\nexports.ContextProvider = ContextProvider;\nexports.Element = Element;\nexports.ForwardRef = ForwardRef;\nexports.Fragment = Fragment;\nexports.Lazy = Lazy;\nexports.Memo = Memo;\nexports.Portal = Portal;\nexports.Profiler = Profiler;\nexports.StrictMode = StrictMode;\nexports.Suspense = Suspense;\nexports.isAsyncMode = isAsyncMode;\nexports.isConcurrentMode = isConcurrentMode;\nexports.isContextConsumer = isContextConsumer;\nexports.isContextProvider = isContextProvider;\nexports.isElement = isElement;\nexports.isForwardRef = isForwardRef;\nexports.isFragment = isFragment;\nexports.isLazy = isLazy;\nexports.isMemo = isMemo;\nexports.isPortal = isPortal;\nexports.isProfiler = isProfiler;\nexports.isStrictMode = isStrictMode;\nexports.isSuspense = isSuspense;\nexports.isValidElementType = isValidElementType;\nexports.typeOf = typeOf;\n  })();\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE_fast_equals__;","module.exports = __WEBPACK_EXTERNAL_MODULE_idb_keyval__;","module.exports = __WEBPACK_EXTERNAL_MODULE_lodash_transform__;","module.exports = __WEBPACK_EXTERNAL_MODULE_react__;","module.exports = __WEBPACK_EXTERNAL_MODULE_react_dom__;","module.exports = __WEBPACK_EXTERNAL_MODULE_underscore__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Onyx from './Onyx';\nimport withOnyx from './withOnyx';\n\nexport default Onyx;\nexport {withOnyx};\n"],"names":["logger","registerLogger","callback","logAlert","message","level","logInfo","deepEqual","_","Logger","cache","Str","createDeferredTask","PerformanceUtils","Storage","utils","unstable_batchedUpdates","METHOD","SET","MERGE","MERGE_COLLECTION","MULTI_SET","CLEAR","mergeQueue","mergeQueuePromise","lastConnectionID","callbackToStateMapping","onyxCollectionKeyMap","Map","recentlyAccessedKeys","evictionAllowList","evictionBlocklist","defaultKeyStates","deferredInitTask","batchUpdatesPromise","batchUpdatesQueue","maybeFlushBatchUpdates","Promise","resolve","setTimeout","updatesCopy","forEach","applyUpdates","batchUpdates","updates","push","getSubsetOfData","sourceData","selector","withOnyxInstanceState","reduceCollectionWithSelector","collection","reduce","finalCollection","item","key","get","hasCacheForKey","getValue","taskName","hasPendingTask","getTaskPromise","promise","getItem","then","val","set","catch","err","captureTask","getAllKeys","storedKeys","length","keys","each","addKey","isCollectionKey","has","isCollectionMemberKey","collectionKey","startsWith","isKeyMatch","configKey","isSafeEvictionKey","testKey","some","tryGetCachedValue","mapping","arguments","undefined","allKeys","matchingKeys","filter","k","values","finalObject","matchedKey","cachedValue","isEmpty","state","withOnyxInstance","removeLastAccessedKey","without","addLastAccessedKey","removeFromEvictionBlockList","connectionID","addToEvictionBlockList","addAllSafeEvictionKeysToRecentlyAccessedList","safeEvictionKey","getCachedCollection","collectionMemberKeys","storedKey","prev","curr","keysChanged","partialCollection","notifyRegularSubscibers","notifyWithOnyxSubscibers","stateMappingKeys","i","subscriber","isSubscribedToCollectionKey","isSubscribedToCollectionMemberKey","cachedCollection","isFunction","waitForCollectionCallback","dataKeys","j","dataKey","setStateProxy","prevState","previousData","statePropertyName","newData","clone","logSetStateCall","dataFromCollection","isUndefined","prevData","data","areObjectsEmpty","keyChanged","canUpdateSubscriber","isNull","prevDataWithNewData","newCollection","previousValue","newValue","console","error","sendDataToConnection","isBatched","setWithOnyxState","addKeyToRecentlyAccessedIfNeeded","removeLeastRecentlyUsedKeys","canEvict","Error","getCollectionDataAndSendAsObject","all","map","value","connect","initWithStoredValues","Boolean","endsWith","storageKeys","disconnect","keyToRemoveFromEvictionBlocklist","scheduleSubscriberUpdate","scheduleNotifyCollectionSubscribers","remove","drop","removeItem","reportStorageQuota","getDatabaseSize","_ref","bytesUsed","bytesRemaining","dbSizeError","evictStorageAndRetry","onyxMethod","_len","args","Array","_key","name","keyForRemoval","find","broadcastUpdate","hasChanged","method","isObject","join","addToAccessedKeys","hasPendingMergeForKey","removeNullValues","removeNestedNullValues","valueWithoutNull","hasValueChanged","updatePromise","setItem","prepareKeyValuePairsForStorage","multiSet","keyValuePairs","updatePromises","keyValuePairsWithoutNull","_ref2","applyMerge","existingValue","changes","shouldRemoveNullObjectValues","lastChange","last","isArray","modifiedData","change","fastMerge","merge","batchedChanges","shouldOverwriteExistingValue","includes","mergeItem","initializeWithDefaultKeyStates","multiGet","pairs","asObject","object","merged","clear","keysToPreserve","keysToBeClearedFromStorage","keyValuesToResetAsCollection","keyValuesToResetIndividually","isKeyToPreserve","contains","isDefaultKey","oldValue","substring","indexOf","defaultKeyValuePairs","omit","removeItems","mergeCollection","hasCollectionKeyCheckFailed","_data","process","env","NODE_ENV","persistedKeys","existingKeys","newKeys","chain","pick","partition","existingKeyCollection","keyValuePairsForExistingCollection","keyValuePairsForNewCollection","promises","multiMerge","promiseUpdate","queue","update","_ref3","isString","existingPromise","defaults","pendingUpdate","reject","setMemoryOnlyKeys","keyList","setRecentKeysLimit","Infinity","init","initialKeyStates","safeEvictionKeys","maxCachedKeysCount","captureMetrics","shouldSyncMultipleInstances","global","localStorage","debugSetState","applyDecorators","setShouldDebugSetState","collectionValues","COLLECTION","acc","keepInstancesSync","Onyx","decorate","require","decorateWithMetrics","getMetrics","resetMetrics","printMetrics","isDefined","negate","OnyxCache","constructor","Set","recentKeys","storageMap","pendingPromises","bindAll","from","add","delete","Object","assign","mergedKeys","returnPromise","finally","numKeysToRemove","size","maxRecentKeysSize","iterator","temp","next","limit","instance","haystack","needle","result","parameter","deferred","res","lodashTransform","debug","diffObject","base","obj","comparisonObject","isEqual","caller","keyThatChanged","logParams","difference","displayName","func","SYNC_ONYX","raiseStorageSyncEvent","onyxKey","raiseStorageSyncManyKeysEvent","onyxKeys","webStorage","onStorageKeyChanged","addEventListener","event","WebStorage","getMany","setMany","del","delMany","createStore","promisifyRequest","customStoreInstance","getCustomStore","provider","keysParam","index","store","getValues","upsertMany","put","_changes","window","navigator","storage","estimate","usage","quota","a","b","isMergeableObject","nonNullObject","prototype","toString","call","mergeObject","target","source","destination","targetKeys","isSourceOrTargetNull","shouldOmitSourceKey","sourceKeys","isSourceKeyUndefined","isSourceKeyMergable","PropTypes","React","getDisplayName","component","getOnyxDataFromState","onyxToStateMapping","mapOnyxToState","shouldDelayUpdates","requiredKeysForInit","config","WrappedComponent","withOnyx","Component","props","_defineProperty","bind","flushPendingSetStates","activeConnectionIDs","cachedState","resultObj","propertyName","initialValue","allowStaleData","loading","tempState","componentDidMount","connectMappingToOnyx","checkEvictableKeys","componentDidUpdate","onyxDataFromState","propName","previousKey","newKey","componentWillUnmount","modifier","pendingSetStates","setState","prevValue","tempStateIsMissingKey","stateUpdate","finalState","render","propsToPass","stateToPass","createElement","_extends","markReadyForHydration","ref","forwardedRef","propTypes","oneOfType","shape","current","defaultProps","forwardRef"],"sourceRoot":""}